<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Suraj Deshmukh</title>
    <link>https://suraj.io/tags/notes/</link>
    <description>Recent content in notes on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Aug 2020 15:33:51 +0530</lastBuildDate>
    
	<atom:link href="https://suraj.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to gracefully kill Kubernetes Jobs with a sidecar?</title>
      <link>https://suraj.io/post/how-to-gracefully-kill-kubernetes-jobs-with-a-sidecar/</link>
      <pubDate>Sat, 29 Aug 2020 15:33:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/how-to-gracefully-kill-kubernetes-jobs-with-a-sidecar/</guid>
      <description>Have you ever had a sidecar in your Kubernetes Job? If no, then trust me that you are lucky. If yes, then you will have the frustration of your life. The thing is Kubernetes Jobs are meant to exit on completion. But if you have a long-running sidecar, then that might twist things for Kubernetes and in turn of you.
Why would you even want a sidecar for Job? Well, one of the most prevalent use case is when using service mesh proxy.</description>
    </item>
    
    <item>
      <title>Use Configmap for Scripts</title>
      <link>https://suraj.io/post/use-configmap-for-scripts/</link>
      <pubDate>Sat, 22 Aug 2020 21:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/use-configmap-for-scripts/</guid>
      <description>We generally use some sort of scripts in application container images. They serve various purposes. Some scripts might do an initial setup before the application starts, others may have the whole logic of the container image, etc. Whatever the goal may be the general pattern is to copy the script into the container image, build the image and then the script is available when you consume the image.
Cons of the Traditional Method The round trip time during development and testing of such script is very long.</description>
    </item>
    
    <item>
      <title>Being Productive with Git</title>
      <link>https://suraj.io/post/being-productive-with-git/</link>
      <pubDate>Sun, 16 Aug 2020 22:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/being-productive-with-git/</guid>
      <description>Contents  Introduction Bash Aliases  Configuration Installation   Global Git Configuration  Configuration Installation   Repository Specific Git Settings  Configuration Installation   Bash Git Prompt  Configuration Installation   Git Push PR Reviews  Configuration Installation   Demo Conclusion  Introduction Git is a day to day tool for version control. It has become a de facto method of source code versioning, it has become ubiquitous with development and its an essential skill for a programmer.</description>
    </item>
    
    <item>
      <title>Being Productive with Kubectl</title>
      <link>https://suraj.io/post/being-productive-with-kubectl/</link>
      <pubDate>Sun, 02 Aug 2020 16:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/being-productive-with-kubectl/</guid>
      <description>This blog will showcase my productivity tips with kubectl . This does not venture into any plugins per se. But only using bash aliases to achieve it.
Bash Aliases # k8s alias alias k=kubectl alias kg=&amp;#34;kubectl get&amp;#34; alias kgp=&amp;#34;kubectl get pods&amp;#34; alias kgs=&amp;#34;kubectl get services&amp;#34; alias kge=&amp;#34;kubectl get events&amp;#34; alias kgpvc=&amp;#34;kubectl get pvc&amp;#34; alias kgpv=&amp;#34;kubectl get pv&amp;#34; alias kd=&amp;#34;kubectl describe&amp;#34; alias kl=&amp;#34;kubectl logs -f&amp;#34; alias kc=&amp;#34;kubectl create -f&amp;#34; I have above aliases setup in the ~/.</description>
    </item>
    
    <item>
      <title>How to backup and restore Prometheus?</title>
      <link>https://suraj.io/post/how-to-backup-and-restore-prometheus/</link>
      <pubDate>Fri, 31 Jul 2020 19:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/how-to-backup-and-restore-prometheus/</guid>
      <description>This blog will show you how to take a backup from a running Prometheus and restore it in some other Prometheus instance. You might ask why would you even want to do something like that? Well, sometimes you want the Prometheus metrics because they were collected for some particular purpose and you want to do some analysis later.
Prerequisites/Assumptions This blog assumes that you have a Prometheus running that is deployed using prometheus-operator in monitoring namespace.</description>
    </item>
    
    <item>
      <title>Framework for managing random scripts and binaries</title>
      <link>https://suraj.io/post/framework-for-scripts-and-binaries/</link>
      <pubDate>Sat, 18 Jul 2020 19:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/framework-for-scripts-and-binaries/</guid>
      <description>I always had a conundrum about how to manage the scripts and binaries downloaded randomly from the internet. One way is to put them in the global PATH directory like /usr/local/bin, but I am sceptical about it.
There are a couple of things I wanted to solve. How do you update these scripts and binaries? How to do it consistently across all my machines? How to make it easier to have my setup available on any new Linux machine(or even container) I setup?</description>
    </item>
    
    <item>
      <title>Cobra and Persistentflags gotchas</title>
      <link>https://suraj.io/post/cobra-persistent-flag/</link>
      <pubDate>Fri, 04 Jan 2019 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/cobra-persistent-flag/</guid>
      <description>If you are using cobra cmd line library for golang applications and it&amp;rsquo;s PersistentFlags and if you have a use case where you are adding same kind of flag in multiple places. You might burn your fingers in that case, if you keep adding it in multiple sub-commands without giving it a second thought. To understand what is really happening and why it is happening follow along.
All the code referenced here can be found here https://github.</description>
    </item>
    
    <item>
      <title>Adding new worker to existing Kubernetes cluster</title>
      <link>https://suraj.io/post/add-new-k8s-node-manually/</link>
      <pubDate>Sun, 23 Sep 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/add-new-k8s-node-manually/</guid>
      <description>To setup a multi-node Kubernetes cluster just run this script and you will have a cluster with 3 masters and 3 workers.
$ kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME worker-0 Ready &amp;lt;none&amp;gt; 1h v1.11.2 192.168.199.20 &amp;lt;none&amp;gt; Ubuntu 18.04.1 LTS 4.15.0-33-generic cri-o://1.11.2 worker-1 Ready &amp;lt;none&amp;gt; 1h v1.11.2 192.168.199.21 &amp;lt;none&amp;gt; Ubuntu 18.04.1 LTS 4.15.0-33-generic cri-o://1.11.2 worker-2 Ready &amp;lt;none&amp;gt; 1h v1.11.2 192.168.199.22 &amp;lt;none&amp;gt; Ubuntu 18.</description>
    </item>
    
    <item>
      <title>Golang struct tags gotchas</title>
      <link>https://suraj.io/post/golang-struct-tags-space/</link>
      <pubDate>Sun, 12 Aug 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/golang-struct-tags-space/</guid>
      <description>In golang while using struct tag, the spaces make a lot of difference. For example look at the following code.
type PodStatus struct { Status string `json: &amp;#34;,status&amp;#34;` } If you run go vet on this piece of code you will get following error:
$ go vet types.go # command-line-arguments ./types.go:28: struct field tag `json: &amp;#34;,status&amp;#34;` not compatible with reflect.StructTag.Get: bad syntax for struct tag value Now this does not tell us what is wrong with the struct tag, json: &amp;quot;,status&amp;quot;.</description>
    </item>
    
    <item>
      <title>Access etcd in OpenShift origin</title>
      <link>https://suraj.io/post/accessing-oc-cluster-up-etcd/</link>
      <pubDate>Wed, 11 Jul 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/accessing-oc-cluster-up-etcd/</guid>
      <description>How do you access the etcd that is being used by the OpenShift started by oc cluster up or using minishift.
If you are using minishift then get docker environment access of the minishift VM by running following commands.
eval $(minishift docker-env) &amp;amp;&amp;amp; eval $(minishift oc-env) Exec into the container named origin that runs OpenShift and all the needed services.
$ docker exec -it origin bash First install the etcdctl needed to talk to etcd.</description>
    </item>
    
    <item>
      <title>Change namespaces in Kubernetes</title>
      <link>https://suraj.io/post/changing-k8s-ns/</link>
      <pubDate>Mon, 02 Jul 2018 08:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/changing-k8s-ns/</guid>
      <description>There is no easy way to change namespace in Kubernetes using kubectl command line utility. But here are some commands that you can alias in your bashrc file so that it&amp;rsquo;s just a single command that you can use to change the namespace in the Kubernetes cluster.
Change namespace Let&amp;rsquo;s see step by step what goes in to change the namespace. So the first step is to find the context.</description>
    </item>
    
    <item>
      <title>Prometheus with existing application on OpenShift</title>
      <link>https://suraj.io/post/using-prometheus/</link>
      <pubDate>Wed, 04 Apr 2018 08:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/using-prometheus/</guid>
      <description>This post is very specific to OpenShift and how you can have an application exposing prometheus metrics to be scraped by a prometheus running in the same cluster.
Requirements Setting up cluster I have done it using the oc cluster up, read about how to do this here. You could also setup a local OpenShift cluster by running minishift, read about setting up minishift here.
Downloading Kedge The configurations defined for setting up this cluster is written in a format that is understood by a tool called Kedge.</description>
    </item>
    
    <item>
      <title>vscode Shortcuts</title>
      <link>https://suraj.io/post/vscode-shortcuts/</link>
      <pubDate>Thu, 22 Feb 2018 08:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/vscode-shortcuts/</guid>
      <description>This post has shortcuts that are generic and golang specific as well. This post will edited from time to time.
Shortcuts  Toggle side bar  Ctrl + B
 Project explorer in side bar  Ctrl + Shift + E
 Project wide search in side bar  Ctrl + Shift + F
 Source control in side bar  Ctrl + Shift + G
 Copy entire line  Ctrl + C (without any selection)</description>
    </item>
    
    <item>
      <title>Clean Node setup</title>
      <link>https://suraj.io/post/node-no-sudo/</link>
      <pubDate>Tue, 04 Jul 2017 22:50:43 +0530</pubDate>
      
      <guid>https://suraj.io/post/node-no-sudo/</guid>
      <description>Make sure you have npm installed.
$ sudo dnf -y install npm Package npm-1:3.10.10-1.6.10.3.1.fc25.x86_64 is already installed, skipping. Dependencies resolved. Nothing to do. Complete! Taken from this post.
mkdir &amp;#34;${HOME}/.npm-packages&amp;#34; echo &amp;#39;prefix=${HOME}/.npm-packages&amp;#39; | tee -a ~/.npmrc echo &amp;#39; #====================================== # npm related stuff NPM_PACKAGES=&amp;#34;${HOME}/.npm-packages&amp;#34; PATH=&amp;#34;$NPM_PACKAGES/bin:$PATH&amp;#34; # Unset manpath so we can inherit from /etc/manpath via the `manpath` command unset MANPATH # delete if you already modified MANPATH elsewhere in your config export MANPATH=&amp;#34;$NPM_PACKAGES/share/man:$(manpath)&amp;#34; #====================================== &amp;#39; | tee -a ~/.</description>
    </item>
    
    <item>
      <title>k8s on CRI-O - single node</title>
      <link>https://suraj.io/post/using-crio-with-k8s-single-node/</link>
      <pubDate>Sat, 08 Apr 2017 00:11:37 +0530</pubDate>
      
      <guid>https://suraj.io/post/using-crio-with-k8s-single-node/</guid>
      <description>Here is a single node Kubernetes on CRI-O. This setup is done on Fedora 25.
Installing OS dependencies dnf -y install \  go \  git \  btrfs-progs-devel \  device-mapper-devel \  glib2-devel \  glibc-devel \  glibc-static \  gpgme-devel \  libassuan-devel \  libgpg-error-devel \  libseccomp-devel \  libselinux-devel \  pkgconfig \  wget \  etcd \  iptables Creating go environment cd ~ mkdir -p ~/go export GOPATH=~/go export GOBIN=$GOPATH/bin export PATH=$PATH:$GOBIN echo &amp;#39;GOPATH=~/go&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Git Notes</title>
      <link>https://suraj.io/post/git-notes/</link>
      <pubDate>Tue, 21 Mar 2017 22:03:48 +0530</pubDate>
      
      <guid>https://suraj.io/post/git-notes/</guid>
      <description>Notes about using git.
Tips and tricks  Switch branches $ git checkout &amp;lt;branch&amp;gt;  status $ git status -sb Show status in short format and also give branch info
 show $ git show Shows log message and diff about the commit you are on.
 log $ git log -L 70,100:pkg/transformer/kubernetes/kubernetes.go Get logs on file between line numbers.
$ git log --graph --abbrev-commit Show graph in logs.
 commit $ git add -p Commit only parts of file.</description>
    </item>
    
    <item>
      <title>Intellij Shortcuts</title>
      <link>https://suraj.io/post/intellij-shortcuts/</link>
      <pubDate>Fri, 17 Mar 2017 14:41:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/intellij-shortcuts/</guid>
      <description>Note: This is a living document and will be updated as I discover new things.
Shortcuts  Ctrl + Shift + A  Find any action in IDE
 Ctrl + Shift + F  Find in Path
 Alt + 1  Open project navigator. You can search here, just start typing here, after the project navigator window is opened.
 Shift + Insert in Project window  Here you can add new file to the project.</description>
    </item>
    
  </channel>
</rss>