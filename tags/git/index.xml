<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Suraj Deshmukh</title>
    <link>http://suraj.io/tags/git/index.xml</link>
    <description>Recent content in Git on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://suraj.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git Notes</title>
      <link>http://suraj.io/post/git-notes/</link>
      <pubDate>Tue, 21 Mar 2017 22:03:48 +0530</pubDate>
      
      <guid>http://suraj.io/post/git-notes/</guid>
      <description>

&lt;p&gt;Notes about using &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tips-and-tricks&#34;&gt;Tips and tricks&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;switch-branches&#34;&gt;Switch branches&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;status&#34;&gt;status&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status -sb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show status in short format and also give branch info&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;show&#34;&gt;show&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shows log message and diff about the commit you are on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;log&#34;&gt;log&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git log -L 70,100:pkg/transformer/kubernetes/kubernetes.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get logs on file between line numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git log --graph --abbrev-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show graph in logs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;commit&#34;&gt;commit&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git add -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit only parts of file. Interactively choose chunks of patch.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;blame&#34;&gt;blame&lt;/h3&gt;

&lt;p&gt;To see who wrote the code? For each line of the file what commit edited that line of code will be shown. So now you can use that git commit and pass it to &lt;code&gt;git show &amp;lt;commit&amp;gt;&lt;/code&gt; to see all the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git blame path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;cherry-pick&#34;&gt;cherry-pick&lt;/h3&gt;

&lt;p&gt;To move a commit from one branch to another branch. Situation where: &lt;em&gt;I committed to master when I meant to commit to my feature branch. I need to move my commit!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get the commit hash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change to the branch you wanted to add that commit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout &amp;lt;feature-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add it to the branch you are on&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick &amp;lt;commit hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cherry-pick&lt;/code&gt; creates an entirely new commit based off the original, and it does not delete the original commit. So you will have to delete it manually. See below how to do it.&lt;/p&gt;

&lt;p&gt;You can also get conflict during &lt;code&gt;cherry-pick&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick 435bedfa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolve the conflict and then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;reset&#34;&gt;reset&lt;/h3&gt;

&lt;p&gt;Remove the last commit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;  : &lt;em&gt;the commit I&amp;rsquo;m currently sitting on&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD^&lt;/code&gt; : &lt;em&gt;this commit&amp;rsquo;s parent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD^^&lt;/code&gt;: &lt;em&gt;this commit&amp;rsquo;s grandparent&lt;/em&gt; and so on&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;rebase&#34;&gt;rebase&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rebase&lt;/code&gt; is a command for changing history.&lt;/li&gt;
&lt;li&gt;Never change history when other people might be using your branch, unless they know you&amp;rsquo;re doing so.&lt;/li&gt;
&lt;li&gt;Never change history on &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Best practice: only change history for commits that have not yet been pushed.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout master
  $ git pull --ff upstream master
  $ git checkout &amp;lt;feature-branch&amp;gt;
  $ git rebase master -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While pushing need to do force push because there is change of history. Local branch and remote branch have diverged.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git push origin &amp;lt;feature-branch&amp;gt; -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of conflicts, find the conflicting file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reolve those conflicts and then continue the rebase&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status
  $ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;use-the-same-commit-message&#34;&gt;Use the same commit message&lt;/h3&gt;

&lt;p&gt;Use the commit message that was generated automatically&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git merge --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git commit --amend --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;squashing-commits&#34;&gt;Squashing commits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Amending the commit&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git add missing-file
  $ git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Squashing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at last 5 commits. Below command will open the text editor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --interactive HEAD~5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once in editor, you can select which ones to squash into previous one and ones to pick as it is. Now type new commit message to squashed commits.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;splitting-commits&#34;&gt;Splitting commits&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --i HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this will open the commit history in editor. The commit you want to split, change it from &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;edit&lt;/code&gt;. Save that file. Git will pause in the rebase process and give us time to create new commits.
  The too-big commit is already present, so let&amp;rsquo;s pop it off, but keep the changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not using &lt;code&gt;--hard&lt;/code&gt; because we want to have the changes we wanted. Make changes as needed. Now add individual file and commit. And continue rebase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bisect&#34;&gt;bisect&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The feature&amp;rsquo;s broken? But it was working fine 2 months ago&amp;hellip; what changes?&lt;/em&gt; Bisect will help you find the commit that introduced the problem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need commit where it was working, commit where it&amp;rsquo;s broken and a test to verify that.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git bisect start
  $ git checkout broken-commit
  $ git bisect bad
  $ git checkout working-commit
  $ git bisect good
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;auto-correct-mis-types-in-commands&#34;&gt;Auto-correct mis-types in commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git config --global help.autocorrect 10
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;edit-git-output-colors&#34;&gt;Edit git output colors&lt;/h3&gt;

&lt;p&gt;Set various colors to the git logs and all the git output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git config --global color.ui auto
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;git-merge-from-someone-else-s-fork&#34;&gt;Git merge from someone else&amp;rsquo;s fork&lt;/h3&gt;

&lt;p&gt;Add their github fork repo as a remote to a clone of your own repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git remote add other-guys-repo &amp;lt;url to other guys repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get their changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git fetch other-guys-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checkout the branch where you want to merge:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout my_new_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge their changes in (assuming they did their work on the master branch):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git merge other-guys-repo/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolve conflicts, commit the resolutions and voila.
  Quick Ref: &lt;a href=&#34;http://stackoverflow.com/a/5606062&#34;&gt;http://stackoverflow.com/a/5606062&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;how-to-pull-remote-branch-from-somebody-else-s-repo&#34;&gt;How to pull remote branch from somebody else&amp;rsquo;s repo&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git remote add coworker git://path/to/coworkers/repo.git
  $ git fetch coworker
  $ git checkout --track coworker/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will setup a local branch foo, tracking the remote branch coworker/foo. So when your coworker has made some changes, you can easily pull them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout foo
  $ git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick Ref: &lt;a href=&#34;http://stackoverflow.com/a/5884825&#34;&gt;http://stackoverflow.com/a/5884825&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;These are tips about using github.com&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;allow edits from maintainers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help so that maintainers can push on your branch. On the PR at bottom right corner there is a check box to enable that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compare ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/&amp;lt;org&amp;gt;/&amp;lt;project&amp;gt;/compare/&amp;lt;old_version&amp;gt;...&amp;lt;new_version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/kubernetes-incubator/kompose/compare/v0.3.0...v0.4.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compare things like branches, releases, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compare, patch ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/&amp;lt;org&amp;gt;/&amp;lt;project&amp;gt;/compare/&amp;lt;branch&amp;gt;...&amp;lt;branch&amp;gt;.patch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/kubernetes-incubator/kompose/compare/v0.3.0...v0.4.0.patch&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anchors on line numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on the line number and shift click on another line later to select a block of code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References and closing issues/PRs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also you can add closes while merging the PR.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code search&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  repo:kubernetes-incubator/kompose is:pr registry in:title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;registry&lt;/em&gt; is the string I am searching in the &lt;em&gt;kubernetes-incubator/kompose&lt;/em&gt; repo, which has that string in PR in title.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  repo:openshift/origin is:issue ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keyboard Shortcuts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; for all the shortcuts.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t&lt;/code&gt; to search for files, fuzzy search, you need only file name not the full file path.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can use gists as full repos&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Embedding the gist&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;code&gt;.pibb&lt;/code&gt; at the end of the gist link, you can use it on github pages and other places.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dont-be-afraid-to-commit.readthedocs.io/en/latest/&#34;&gt;Don&amp;rsquo;t be afraid to commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Git - David Baumgold - &lt;a href=&#34;https://www.youtube.com/watch?v=4EOZvow1mk4&#34;&gt;video&lt;/a&gt;, &lt;a href=&#34;https://speakerdeck.com/singingwolfboy/advanced-git&#34;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/searching-github/&#34;&gt;Searching GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tips &amp;amp; Tricks: Gotta Git Them All - GitHub Universe 2016, &lt;a href=&#34;https://youtu.be/LsxDxL4PYik&#34;&gt;video&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>