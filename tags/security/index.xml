<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Suraj Deshmukh</title>
    <link>https://suraj.io/tags/security/</link>
    <description>Recent content in security on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Oct 2018 00:00:51 +0530</lastBuildDate>
    
	<atom:link href="https://suraj.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PodSecurityPolicy on existing Kubernetes clusters</title>
      <link>https://suraj.io/post/psp-on-existing-cluster/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/psp-on-existing-cluster/</guid>
      <description>I enabled PodSecurityPolicy on a minikube cluster by appending PodSecurityPolicy to the apiserver flag in minikube like this:
--extra-config=apiserver.enable-admission-plugins=Initializers,NamespaceLifecycle,\ LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,\ NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,\ ResourceQuota,PodSecurityPolicy  Ideally when you have PSP enabled and if you don&amp;rsquo;t define any PSP and authorize it with right RBAC no pod will start in the cluster. But what I saw was that there were some pods still running in kube-system namespace.
$ kubectl -n kube-system get pods NAME READY STATUS RESTARTS AGE coredns-576cbf47c7-g2t8v 1/1 Running 4 5d11h etcd-minikube 1/1 Running 2 5d11h heapster-bn5xp 1/1 Running 2 5d11h influxdb-grafana-qzpv4 2/2 Running 4 5d11h kube-addon-manager-minikube 1/1 Running 2 5d11h kube-controller-manager-minikube 1/1 Running 1 4d20h kube-scheduler-minikube 1/1 Running 2 5d11h kubernetes-dashboard-5bb6f7c8c6-9d564 1/1 Running 8 5d11h storage-provisioner 1/1 Running 7 5d11h  Which got me thinking what is wrong with the way PSPs work.</description>
    </item>
    
    <item>
      <title>Add new Node to k8s cluster with cert rotation</title>
      <link>https://suraj.io/post/add-new-k8s-node-cert-rotate/</link>
      <pubDate>Tue, 16 Oct 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/add-new-k8s-node-cert-rotate/</guid>
      <description>The setup here is created by following Kubernetes the Hard Way by Kelsey Hightower. So if you are following along in this then do all the setup till the step Bootstrapping the Kubernetes Worker Nodes. In this just don&amp;rsquo;t start the kubelet, start other services like containerd and kube-proxy.
master node Following the docs of TLS Bootstrapping, let&amp;rsquo;s first create the token authentication file. Create a file with following content:</description>
    </item>
    
    <item>
      <title>Single node Kubernetes Cluster on Fedora with SELinux enabled</title>
      <link>https://suraj.io/post/single-node-k8s-fedora-selinux/</link>
      <pubDate>Tue, 11 Sep 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/single-node-k8s-fedora-selinux/</guid>
      <description>Start a single node fedora machine, using whatever method but I have used this Vagrantfile to do it:
# -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.define &amp;quot;fedora&amp;quot; do |fedora| fedora.vm.box = &amp;quot;fedora/28-cloud-base&amp;quot; config.vm.hostname = &amp;quot;fedora&amp;quot; end config.vm.provider &amp;quot;virtualbox&amp;quot; do |virtualbox, override| virtualbox.memory = 4096 virtualbox.cpus = 4 end config.vm.provision &amp;quot;shell&amp;quot;, privileged: false, inline: &amp;lt;&amp;lt;-SHELL echo &#39;127.0.0.1 localhost&#39; | cat - /etc/hosts &amp;gt; temp &amp;amp;&amp;amp; sudo mv temp /etc/hosts SHELL end  Now start it and ssh into it:</description>
    </item>
    
    <item>
      <title>HostPath volumes and it&#39;s problems</title>
      <link>https://suraj.io/post/k8s-hostpat-nuke-nodes/</link>
      <pubDate>Mon, 10 Sep 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/k8s-hostpat-nuke-nodes/</guid>
      <description>This post will demonstrate how Kubernetes HostPath volumes can help you get access to the Kubernetes nodes. Atleast you can play with the filesystem of the node on which you pod is scheduled on. You can get access to other containers running on the host, certificates of the kubelet, etc.
I have a 3-master and 3-node cluster and setup using this script, running in a Vagrant environment.
All the nodes are in ready state:</description>
    </item>
    
  </channel>
</rss>