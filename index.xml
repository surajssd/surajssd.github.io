<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Suraj Deshmukh</title>
    <link>http://suraj.io/index.xml</link>
    <description>Recent content on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 May 2017 02:21:49 +0530</lastBuildDate>
    <atom:link href="http://suraj.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bangalore Kubernetes Meetup May 2017</title>
      <link>http://suraj.io/post/blr-k8s-meetup-may-2017/</link>
      <pubDate>Wed, 24 May 2017 02:21:49 +0530</pubDate>
      
      <guid>http://suraj.io/post/blr-k8s-meetup-may-2017/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&amp;ldquo;One does not simply deploy containers to production&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/mordor_meme.jpg&#34; alt=&#34;One does not simply deploy containers to production&#34; title=&#34;One does not simply deploy containers to production&#34; /&gt;&lt;/p&gt;

&lt;p&gt;With the rising craze around the container community in Bangalore and relative lack in awareness
around different container technologies like &lt;a href=&#34;http://kubernetesbyexample.com/&#34;&gt;Kubernetes&lt;/a&gt; and &lt;a href=&#34;https://developers.openshift.com/&#34;&gt;OpenShift&lt;/a&gt;,
an effort was made in imparting knowledge in this direction.&lt;/p&gt;

&lt;p&gt;So, this time around newbies were targeted for the Kubernetes Meetup.&lt;/p&gt;

&lt;p&gt;With the above objective, it was decided to have a &lt;a href=&#34;https://www.meetup.com/kubernetes-openshift-India-Meetup/events/239381714/&#34;&gt;Kubernetes 101 workshop&lt;/a&gt;
 at Red Hat Bangalore office on May 21, 2017 to familiarize people with concepts of Kubernetes and OpenShift and their
 usage and relevance as container orchestration tools for managing application deployments.&lt;/p&gt;

&lt;p&gt;The schedule for the Meetup was as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes 101 - Knowing the terms in Kubernetes&lt;/li&gt;
&lt;li&gt;Kubernetes 101 - Hands-on workshop&lt;/li&gt;
&lt;li&gt;OpenShift 101 - What OpenShift adds to Kubernetes?&lt;/li&gt;
&lt;li&gt;OpenShift 101 - Hands-on workshop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As per the schedule, we opened the floor with a talk by &lt;a href=&#34;https://www.linkedin.com/in/hemani-katyal-57900081&#34;&gt;Hemani Katyal&lt;/a&gt;
 on Kubernetes Basics(&lt;a href=&#34;https://docs.google.com/presentation/d/1pUg6eOfIfznSS-2m1-7EEXbyHyH9NPgCRZw6WcX6FG4/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;),
 wherein she explained the need for Kubernetes, what it is, it&amp;rsquo;s architecture, why Kubernetes would be better container
 orchestrator and the constructs of Kubernetes like pods, volumes, labels, replications controllers, services, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/hemani.jpg&#34; alt=&#34;Hemani Katyal&#34; title=&#34;Hemani Katyal explaining Kubernetes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was good to see people interested in concepts of service and the way it load balances traffic, how the labels
 construct is helpful in bringing in flexibility with deployments, why Kubernetes is better than other container
 orchestrators.&lt;/p&gt;

&lt;p&gt;Following up with the excitement, &lt;a href=&#34;https://twitter.com/surajd_&#34;&gt;Suraj Deshmukh&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/procrypt0&#34;&gt;Abhishek Singh&lt;/a&gt;,
 &lt;a href=&#34;https://twitter.com/zee_10000&#34;&gt;Zeeshan Ahmed&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/ContainsCafeine&#34;&gt;Shubham Minglani&lt;/a&gt; happily
 volunteered to conduct the hands-on workshop. The workshop exercises were taken from &lt;a href=&#34;https://www.katacoda.com/courses/kubernetes&#34;&gt;Kubernetes section&lt;/a&gt;
 of &lt;a href=&#34;https://www.katacoda.com/&#34;&gt;katacoda.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/mzee.jpg&#34; alt=&#34;Zeeshan Ahmed&#34; title=&#34;Zeeshan Ahmed explaining Kubernetes Secrets and ConfigMaps&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was pleasure to have an excited and responsive audience. Questions like kube-adm functionality on CentOS,
 installing Kubernetes in an isolated environment without internet, how ingress works and the likes of the same were
 asked during the hands-on session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/shubham.jpg&#34; alt=&#34;Shubham Minglani&#34; title=&#34;Shubham Minglani explaining Kubernetes HealthChecks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Post a quick coffee break, &lt;a href=&#34;https://twitter.com/procrypt0&#34;&gt;Abhishek Singh&lt;/a&gt; briefed the audience about OpenShift basics(&lt;a href=&#34;https://docs.google.com/presentation/d/1e9dEuNfoFI0kMbtQmPUIgw85zS7s-cvupWB5ogYxdpc/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;),
 wherein he explained what OpenShift is and how it is an addon on top of Kubernetes. He touched upon topics like user
 management, various build features of OpenShift, container image handling in OpenShift, the way deployment fits in with
 build part, security, running OpenShift locally using &lt;a href=&#34;https://github.com/minishift/minishift/&#34;&gt;Minishift&lt;/a&gt;, to name a few.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/abhi.jpg&#34; alt=&#34;Abhishek Singh&#34; title=&#34;Abhishek Singh explaining OpenShift&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Satiating the hunger not just for knowledge but food as well, we broke for lunch.&lt;/p&gt;

&lt;p&gt;Post which we continued with OpenShift hand-on exercises, which were again from &lt;a href=&#34;https://learn.openshift.com/&#34;&gt;OpenShift section&lt;/a&gt;
 of &lt;a href=&#34;katacoda.com&#34;&gt;katacoda.com&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/zee_10000&#34;&gt;Zeeshan Ahmed&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/red_suraj&#34;&gt;Suraj Narwade&lt;/a&gt;
 and &lt;a href=&#34;https://twitter.com/procrypt0&#34;&gt;Abhishek Singh&lt;/a&gt; helped with the workshop exercises. There seemed to be lot of
 interest around topics like the &lt;a href=&#34;https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/builds_and_image_streams.html#source-build&#34;&gt;source to image&lt;/a&gt;
 feature of OpenShift, if &lt;a href=&#34;https://docs.openshift.com/enterprise/3.2/dev_guide/routes.html&#34;&gt;OpenShift’s router&lt;/a&gt; allowed
 UDP traffic, the difference between ingress and routes.&lt;/p&gt;

&lt;p&gt;Red Hat’s latest announcement regarding the &lt;a href=&#34;https://blog.openshift.com/aws-and-red-hat-digging-a-little-deeper/&#34;&gt;integration of AWS services with OpenShift&lt;/a&gt;
 also generated some curiosity among the audience.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-may-2017/people.jpg&#34; alt=&#34;Folks listening&#34; title=&#34;Folks listening&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The meetup concluded asking for &lt;a href=&#34;https://goo.gl/forms/ILSI0Xb3OKuKMKht2&#34;&gt;feedback&lt;/a&gt; and distributing some swag. In
 feedback we received, people wanted to see some real world examples, the kind of applications that run on these
 platforms, and much more which are advanced topics and we would love to take up in normal meetup as opposed to a 101.&lt;/p&gt;

&lt;p&gt;I would like to conclude here by thanking all speakers, volunteers for spreading knowledge, &lt;a href=&#34;katacoda.com&#34;&gt;katacoda.com&lt;/a&gt;
 for awesome workshop material and audience for listening patiently and trying out things and making this meetup
 successful. And last but not the least, I would like to express my deepest gratitude to Red Hat for sponsoring the event
 and providing us with the venue and &lt;a href=&#34;https://www.linkedin.com/in/hemani-katyal-57900081&#34;&gt;Hemani Katyal&lt;/a&gt;
 for making this post an awesome read.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes DIY hands-on exercises &lt;a href=&#34;https://www.katacoda.com/courses/kubernetes&#34;&gt;https://www.katacoda.com/courses/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenShift DIY hands-on exercises &lt;a href=&#34;https://learn.openshift.com/&#34;&gt;https://learn.openshift.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Enabling local development with Kubernetes</title>
      <link>http://suraj.io/post/enabling-local-development-with-k8s/</link>
      <pubDate>Sun, 23 Apr 2017 15:57:07 +0530</pubDate>
      
      <guid>http://suraj.io/post/enabling-local-development-with-k8s/</guid>
      <description>

&lt;p&gt;I want to show how you can enable &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; in your day to day development workflow. So that
you get the feel of production deployment locally from day 1.&lt;/p&gt;

&lt;p&gt;I have a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;flask application&lt;/a&gt; which I am working on. The basic directory structure looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll
total 24
-rw-rw-r--. 1 foo foo  427 Apr 23 16:23 app.py
-rw-rw-r--. 1 foo foo  201 Apr 23 16:55 docker-compose.yml
-rw-rw-r--. 1 foo foo  363 Apr 23 16:21 Dockerfile
-rwxrwxr-x. 1 foo foo   82 Dec  5 19:41 entrypoint.sh
-rw-rw-r--. 1 foo foo 3010 Dec  5 19:41 README.adoc
-rw-rw-r--. 1 foo foo   11 Dec  5 19:41 requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all of these files in this &lt;a href=&#34;https://github.com/surajssd/hitcounter&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For having a local cluster I am using &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt;. So follow instructions to
&lt;a href=&#34;https://kubernetes.io/docs/getting-started-guides/minikube/&#34;&gt;setup minikube&lt;/a&gt;. Once you follow the instructions
you will have a vm running a single node kubernetes cluster and a locally available &lt;code&gt;kubectl&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;Before running this application on the minikube cluster we need configurations that kubernetes understands. Since we
already have docker-compose file we will generate configs from this file with the help from tool called &lt;a href=&#34;http://kompose.io/&#34;&gt;kompose&lt;/a&gt;.
Install kompose as per instructions as given on &lt;a href=&#34;https://github.com/kubernetes-incubator/kompose#installation&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generating configs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir configs
$ kompose convert -o configs/
WARN Kubernetes provider doesnt support build key - ignoring
INFO file &amp;quot;configs/hitcounter-service.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-service.yaml&amp;quot; created
INFO file &amp;quot;configs/hitcounter-deployment.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-deployment.yaml&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we deploy the app we need to make some changes in the deployment files, that were converted from docker-compose service
having &lt;code&gt;build&lt;/code&gt; construct in them. In our case only python app &lt;code&gt;hitcounter&lt;/code&gt; is built is being built from &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will edit file &lt;code&gt;hitcounter-deployment.yaml&lt;/code&gt; in &lt;code&gt;configs&lt;/code&gt; directory, to not pull image but read image from the local docker
storage. Add a field after &lt;code&gt;image&lt;/code&gt; called &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. Make changes as shown in following diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ git diff
diff --git a/configs/hitcounter-deployment.yaml b/configs/hitcounter-deployment.yaml
index 7b1116d..0ef35b3 100644
--- a/configs/hitcounter-deployment.yaml
+++ b/configs/hitcounter-deployment.yaml
@@ -17,6 +17,7 @@ spec:
         - name: REDIS_HOST
           value: redis
         image: hitcounter
+        imagePullPolicy: IfNotPresent
         name: hitcounter
         ports:
         - containerPort: 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready with the configs, but we need to build container image for our app. So here you will need to have
&lt;code&gt;docker-compose&lt;/code&gt; installed on your machine. For that follow &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docs here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Build image in the minikube&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval $(minikube docker-env)
docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the build is complete, we are good to the deployment in kubernetes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create -f configs/
deployment &amp;quot;hitcounter&amp;quot; created
service &amp;quot;hitcounter&amp;quot; created
deployment &amp;quot;redis&amp;quot; created
service &amp;quot;redis&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that the app is running, find out the exposed IP Address as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get svc
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
hitcounter   10.0.0.244   &amp;lt;pending&amp;gt;     5000:30476/TCP   6s
kubernetes   10.0.0.1     &amp;lt;none&amp;gt;        443/TCP          3d
redis        10.0.0.21    &amp;lt;none&amp;gt;        6379/TCP         6s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now hit the externally exposed port &lt;code&gt;30476&lt;/code&gt; of service &lt;code&gt;hitcounter&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl $(minikube ip):30476
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everytime you make changes to code do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build
kubectl scale deployment hitcounter --replicas=0
kubectl scale deployment hitcounter --replicas=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above we are removing all containers with old image and asking it to use the new image. For OpenShift we can do
&lt;code&gt;oc deploy hitcounter --latest&lt;/code&gt; and it will trigger the deployment but I could not find anything similar with
kubernetes.&lt;/p&gt;

&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Why do I need to make changes in the kompose generated configs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because by the default the config that kompose generates will not set &lt;code&gt;imagePullPolicy&lt;/code&gt; and hence Kubernetes
assumes its value to be &lt;code&gt;Always&lt;/code&gt;. So if you don&amp;rsquo;t make changes and try to deploy then Kubernetes will try
to find the image from docker hub. Which it won&amp;rsquo;t find and then that deployment will fail.
So we need to tell Kubernetes to look for the image in local docker storage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Can I use the same configs in the production servers as well?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes you can use it just remove the change we did in the &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. The change is done
to enable you to use the locally built images without having to push the image to any container registry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- How do I get images when I am deploying in production level cluster?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure your cluster can pull images from some private container registry. And then set up a build pipeline
from your code repo to build container on every change of it&amp;rsquo;s stable branch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I have &lt;code&gt;build&lt;/code&gt; defined in my &lt;code&gt;docker-compose&lt;/code&gt; service why do I need to mention image name?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With docker-compose this is okay. But kompose cannot make up a name on it&amp;rsquo;s own and create deployment. The
&lt;a href=&#34;https://github.com/kubernetes-incubator/kompose/issues/571&#34;&gt;issue&lt;/a&gt; is tracked in kompose. But for now
with &lt;code&gt;build&lt;/code&gt; also provide the &lt;code&gt;image&lt;/code&gt; name you would expect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I get error running docker commands with minikube?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you face problem accessing the docker daemon running inside the minikube VM like one of this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(minikube docker-env)
$ docker ps
could not read CA certificate &amp;quot;/etc/docker/ca.pem&amp;quot;: open /etc/docker/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be because there is a mismatch in docker client and docker daemon version, so to solve this issue just copy
the docker client from the minikube VM to the local machine.&lt;/p&gt;

&lt;p&gt;Enter in the VM&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the binary to host machine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp $(which docker) foo@192.168.122.1:/home/foo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put the binary in &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any other questions please ask it, I would like to add those here in FAQ section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick PV for local Kubernetes cluster</title>
      <link>http://suraj.io/post/quick-pv-for-local-k8s/</link>
      <pubDate>Tue, 18 Apr 2017 23:56:15 +0530</pubDate>
      
      <guid>http://suraj.io/post/quick-pv-for-local-k8s/</guid>
      <description>

&lt;p&gt;I do lot of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; related work either on &lt;a href=&#34;https://kubernetes.io/docs/getting-started-guides/minikube/&#34;&gt;minikube&lt;/a&gt; or local &lt;a href=&#34;https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md#overview&#34;&gt;OpenShift cluster&lt;/a&gt; setup in a VM. Often I need to create a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; a.k.a. &lt;code&gt;pvc&lt;/code&gt;. But to use &lt;code&gt;pvc&lt;/code&gt; you have to have a &lt;code&gt;PersistentVolume&lt;/code&gt; or &lt;code&gt;pv&lt;/code&gt; defined.&lt;/p&gt;

&lt;h3 id=&#34;enter-into-the-machine-running-k8s&#34;&gt;Enter into the machine running k8s&lt;/h3&gt;

&lt;p&gt;If using minikube you can do&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-local-directory-for-storage&#34;&gt;Create a local directory for storage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /tmp/pv0001
chmod 777 /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are on a machine that has &lt;code&gt;SELinux&lt;/code&gt; enabled do the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chcon -R -t svirt_sandbox_file_t /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-pv&#34;&gt;Creating &lt;code&gt;pv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Create file with following content&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat pv.yaml
apiVersion: &amp;quot;v1&amp;quot;
kind: &amp;quot;PersistentVolume&amp;quot;
metadata:
  name: &amp;quot;pv0001&amp;quot;
spec:
  capacity:
    storage: &amp;quot;5Gi&amp;quot;
  accessModes:
    - &amp;quot;ReadWriteOnce&amp;quot;
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get to the terminal from where you can run &lt;code&gt;kubectl&lt;/code&gt; commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create -f pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are doing it for OpenShift cluster then run following command with privileged access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;oc create -f pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have a &lt;code&gt;pv&lt;/code&gt; now you can create &lt;code&gt;pvc&lt;/code&gt;&amp;rsquo;s to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bangalore Kubernetes Meetup April 2017</title>
      <link>http://suraj.io/post/blr-k8s-meetup-april-2017/</link>
      <pubDate>Sat, 08 Apr 2017 14:31:33 +0530</pubDate>
      
      <guid>http://suraj.io/post/blr-k8s-meetup-april-2017/</guid>
      <description>&lt;p&gt;Like many Saturday mornings, &lt;a href=&#34;https://www.google.co.in/search?q=red+hat+bangalore&amp;amp;oq=red+ha&amp;amp;aqs=chrome.0.69i59j69i61l3j69i57j69i59.5776j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8#q=red+hat+bangalore&amp;amp;rflfq=1&amp;amp;rlha=0&amp;amp;rllag=12949018,77600064,1885&amp;amp;tbm=lcl&amp;amp;tbs=lf_pqs:EAE,lf:1,lf_ui:3&amp;amp;rldoc=1&amp;amp;rlfi=hd:;si:1155840882052252649;mv:!1m3!1d18064.656204115003!2d77.600064!3d12.949018050000001!2m3!1f0!2f0!3f0!3m2!1i91!2i446!4f13.1;tbs:lf_pqs:EAE,lf:1,lf_ui:3&#34;&gt;Red Hat Bangalore&lt;/a&gt;
office was once again abuzz with enthusiasm on 8th of April, for hosting yet
another successful chapter of &lt;a href=&#34;https://www.meetup.com/kubernetes-openshift-India-Meetup/events/238335903/&#34;&gt;Bangalore Kubernetes Meetup&lt;/a&gt;.
The Meetup had a good turnaround of about 40 people who gave up on their
early morning saturday sleep to attend it despite the sweltering hot
season and in line were four awesome talks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/surajd_&#34;&gt;Suraj Deshmukh&lt;/a&gt; set the stage with his opening
talk, &lt;em&gt;Kubernetes on CRI-O&lt;/em&gt;, wherein he explained different jargons like
OCI, CRI, etc., introduced CRI-O and it’s architecture. Explaining how it
glues Kubernetes and OCI compliant runtimes and concluding it with a demo
showing how Kubernetes uses CRI-O. Link to &lt;a href=&#34;https://docs.google.com/presentation/d/1tP7b1e1fy-n3_v5bilDLjOAheZGu602B3WK-1kxXkVo/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;,
&lt;a href=&#34;https://youtu.be/_E7foB4kVGM&#34;&gt;video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-april-2017/group.jpg&#34; alt=&#34;Folks listening&#34; title=&#34;Folks listening&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next in queue, was another wonderful talk by &lt;a href=&#34;https://twitter.com/dipakpawar231&#34;&gt;Dipak Pawar&lt;/a&gt;
about &lt;em&gt;System and integration testing for Kubernetes/OpenShift with
arquillian-cube and JBoss Forge&lt;/em&gt;, elaborating the usefulness of
arquillian-cube’s integration for Kubernetes and OpenShift coupled
with Forge tooling for testing micro-services deployed on OpenShift/Kubernetes.
Link to &lt;a href=&#34;https://youtu.be/f4qIKmlBg34&#34;&gt;video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-april-2017/dipak.jpg&#34; alt=&#34;Dipak Pawar&#34; title=&#34;Dipak Pawar demoing arquillian-cube&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Following a quick breather, was an informative talk by &lt;a href=&#34;https://twitter.com/budhrg&#34;&gt;Budhram Gurung&lt;/a&gt;
on &lt;em&gt;Running OpenShift locally using Minishift&lt;/em&gt;, highlighting the inspiration
for the project and covering components of Minishift with a demo showing
it&amp;rsquo;s usage. Also, leaving behind a note on how one could reach out to the
developers and contribute to Minishift. Link to &lt;a href=&#34;https://docs.google.com/presentation/d/1oONy-2ncemEE7dtddoZL0Lcu0KVIUtqADhEX0bB5q5g/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;,
&lt;a href=&#34;https://youtu.be/dvYeRbSpxR8&#34;&gt;video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-april-2017/budhram.jpg&#34; alt=&#34;Budhram Gurung&#34; title=&#34;Budhram demoing Minishift&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Last, but not the least, planned talk was by &lt;a href=&#34;https://twitter.com/red_suraj&#34;&gt;Suraj Narwade&lt;/a&gt;
on running &lt;em&gt;Docker on ARM/Raspberry PI&lt;/em&gt;, wherein he enjoyed sharing his
experience of working on his hobby project, and all the problems faced by
him in trying to get containers running on Raspberry PI. He shared his
discovery showcasing the incompatibility of the container images built on
&lt;code&gt;x86_64&lt;/code&gt;, to run on &lt;code&gt;arm&lt;/code&gt;. Link to &lt;a href=&#34;https://docs.google.com/presentation/d/1cJeQyMG_NOn8QDJpIHkAjTT4I0L6AyQ8DxeGbVWn850/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;,
&lt;a href=&#34;https://youtu.be/8yzPt5MfY8s&#34;&gt;video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-april-2017/surajn.jpg&#34; alt=&#34;Suraj Narwade&#34; title=&#34;Suraj Narwade demoing about the Docker&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, an unanticipated lightening talk took the audience by storm where
a quick 3 minutes demo on &lt;em&gt;Persistent Storage with Kubernetes&lt;/em&gt; by &lt;a href=&#34;https://twitter.com/raghavendra_t&#34;&gt;Raghavendra Talur&lt;/a&gt;
turned into a good discussion of 30 minutes. He demo-ed, hyper-converged
storage and dynamic provisioning with gluster and answered a lot of queries
regarding setting up storage with Kubernetes, finishing on a
to be continued note in the successive meetup.&lt;/p&gt;

&lt;p&gt;The meetup concluded with discussion over snacks and planning for the next
chapter of this meetup, which will be a &lt;strong&gt;Kubernetes and OpenShift 101 workshop&lt;/strong&gt;
for beginners.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://suraj.io/images/blr-k8s-meetup-april-2017/network.jpg&#34; alt=&#34;Folks networking&#34; title=&#34;Folks networking&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all the Speakers for sharing their valuable thoughts and learnings,
&lt;a href=&#34;https://twitter.com/nogenerics&#34;&gt;Baiju&lt;/a&gt; for recording all the sessions,
&lt;a href=&#34;https://www.linkedin.com/in/hemani-katyal-57900081&#34;&gt;Hemani&lt;/a&gt; for making this post a good read
and &lt;a href=&#34;https://twitter.com/redhatopen&#34;&gt;Red Hat&lt;/a&gt; for the venue.&lt;/p&gt;

&lt;p&gt;The meetup is also featured on &lt;a href=&#34;http://www.k8sport.org/&#34;&gt;K8sPort&lt;/a&gt;, which
is community engagement platform for Kubernetes community, courtesy &lt;a href=&#34;https://twitter.com/RSQuackenbush&#34;&gt;Ryan Quackenbush&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>k8s on CRI-O - single node</title>
      <link>http://suraj.io/post/using-crio-with-k8s-single-node/</link>
      <pubDate>Sat, 08 Apr 2017 00:11:37 +0530</pubDate>
      
      <guid>http://suraj.io/post/using-crio-with-k8s-single-node/</guid>
      <description>

&lt;p&gt;Here is a single node Kubernetes on CRI-O. This setup is done on Fedora 25.&lt;/p&gt;

&lt;h3 id=&#34;installing-os-dependencies&#34;&gt;Installing OS dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf -y install \
  go \
  git \
  btrfs-progs-devel \
  device-mapper-devel \
  glib2-devel \
  glibc-devel \
  glibc-static \
  gpgme-devel \
  libassuan-devel \
  libgpg-error-devel \
  libseccomp-devel \
  libselinux-devel \
  pkgconfig \
  wget \
  etcd \
  iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-go-environment&#34;&gt;Creating go environment&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~
mkdir -p ~/go

export GOPATH=~/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

echo &#39;GOPATH=~/go&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;GOBIN=$GOPATH/bin&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;PATH=$PATH:$GOBIN&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pull-all-the-code-dependencies&#34;&gt;Pull all the code dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d k8s.io/kubernetes
go get -u github.com/cloudflare/cfssl/cmd/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-runc&#34;&gt;Install runc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d github.com/opencontainers/runc
cd $GOPATH/src/github.com/opencontainers/runc
git reset --hard v1.0.0-rc3
make BUILDTAGS=&#39;seccomp selinux&#39; &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-cri-o&#34;&gt;Build &lt;code&gt;cri-o&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd
go get -d github.com/kubernetes-incubator/cri-o
cd $GOPATH/src/github.com/kubernetes-incubator/cri-o
make install.tools
make &amp;amp;&amp;amp; make install
make install.config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-up-cni&#34;&gt;Set up CNI&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d github.com/containernetworking/cni
cd $GOPATH/src/github.com/containernetworking/cni
./build.sh

mkdir -p /opt/cni/bin
cp bin/* /opt/cni/bin/

mkdir -p /etc/cni/net.d/
cat &amp;gt; /etc/cni/net.d/10-ocid-bridge.conf &amp;lt;&amp;lt;EOF
{
    &amp;quot;cniVersion&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;ocid-bridge&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;bridge&amp;quot;,
    &amp;quot;bridge&amp;quot;: &amp;quot;cni0&amp;quot;,
    &amp;quot;isGateway&amp;quot;: true,
    &amp;quot;ipMasq&amp;quot;: true,
    &amp;quot;ipam&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;host-local&amp;quot;,
        &amp;quot;subnet&amp;quot;: &amp;quot;10.88.0.0/16&amp;quot;,
        &amp;quot;routes&amp;quot;: [
            { &amp;quot;dst&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; }
        ]
    }
}
EOF

cat &amp;gt; /etc/cni/net.d/99-loopback.conf &amp;lt;&amp;lt;EOF
{
    &amp;quot;cniVersion&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;loopback&amp;quot;
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-policy-json&#34;&gt;Create &lt;code&gt;policy.json&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p  /etc/containers

cat &amp;gt; /etc/containers/policy.json &amp;lt;&amp;lt;EOF
{
    &amp;quot;default&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;insecureAcceptAnything&amp;quot;
        }
    ]
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;make-selinux-happy&#34;&gt;Make SELinux happy&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /var/lib/containers/
chcon -Rt svirt_sandbox_file_t /var/lib/containers/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-ocid-service&#34;&gt;Start ocid service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:/usr/local/bin/
echo &#39;PATH=$PATH:/usr/local/bin/&#39; &amp;gt;&amp;gt; ~/.bashrc
ocid --runtime /usr/local/sbin/runc --log /root/ocid.log --debug --selinux true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-k8s-cluster-with-crio&#34;&gt;Start k8s cluster with crio&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd $GOPATH/src/k8s.io/kubernetes/
CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT=&#39;/var/run/ocid.sock --runtime-request-timeout=15m&#39; ./hack/local-up-cluster.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use &lt;code&gt;kubectl&lt;/code&gt; (in new terminal)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias kubectl=$GOPATH/src/k8s.io/kubernetes/cluster/kubectl.sh
echo &#39;alias kubectl=$GOPATH/src/k8s.io/kubernetes/cluster/kubectl.sh&#39;  &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ref:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bangalore Kubernetes Meetup - April 2017 - &lt;a href=&#34;https://docs.google.com/presentation/d/1tP7b1e1fy-n3_v5bilDLjOAheZGu602B3WK-1kxXkVo/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/runc0m&#34;&gt;runcom&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/runcom/ba58bf2f64e38d9f5d376d587751a0f9#file-fedora_25&#34;&gt;Setup script&lt;/a&gt; for Fedora.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o&#34;&gt;cri-o project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cri-o &lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o/blob/master/tutorial.md&#34;&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o/blob/master/kubernetes.md&#34;&gt;Running cri-o on kubernetes cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CRI-O: A kubernetes runtime - &lt;a href=&#34;https://www.youtube.com/watch?v=R-p7BXhtodo&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TODOs for new project</title>
      <link>http://suraj.io/post/starting-a-new-opensource-project-requirements/</link>
      <pubDate>Sun, 26 Mar 2017 18:19:15 +0530</pubDate>
      
      <guid>http://suraj.io/post/starting-a-new-opensource-project-requirements/</guid>
      <description>

&lt;p&gt;When starting a new open source project, apart from coding following are the things that need to be done.&lt;/p&gt;

&lt;h2 id=&#34;docs&#34;&gt;Docs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;How to install?&lt;/li&gt;
&lt;li&gt;How to use?&lt;/li&gt;
&lt;li&gt;Code of conduct guidelines&lt;/li&gt;
&lt;li&gt;Copyright&lt;/li&gt;
&lt;li&gt;Issue template like &lt;code&gt;.github&lt;/code&gt; in repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;developer-docs&#34;&gt;Developer docs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How to install for developer?&lt;/li&gt;
&lt;li&gt;Developer docs&lt;/li&gt;
&lt;li&gt;Contribution guidelines&lt;/li&gt;
&lt;li&gt;Team meetings info&lt;/li&gt;
&lt;li&gt;Team communication channels&lt;/li&gt;
&lt;li&gt;Issue label guidelines&lt;/li&gt;
&lt;li&gt;Coding standards&lt;/li&gt;
&lt;li&gt;Code placement doc, or something that explains the way code is ordered&lt;/li&gt;
&lt;li&gt;Design document&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unit tests&lt;/li&gt;
&lt;li&gt;Functional tests&lt;/li&gt;
&lt;li&gt;Coverage check&lt;/li&gt;
&lt;li&gt;CI for automatic tests&lt;/li&gt;
&lt;li&gt;Distro based package&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just few things that I could think of, please suggest if you know more in comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rpm Notes</title>
      <link>http://suraj.io/post/rpm-notes/</link>
      <pubDate>Fri, 24 Mar 2017 10:35:54 +0530</pubDate>
      
      <guid>http://suraj.io/post/rpm-notes/</guid>
      <description>

&lt;h2 id=&#34;setup-of-the-system-for-building-rpms&#34;&gt;Setup of the system for building rpms&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ dnf -y install fedora-packager fedora-review
$ sudo usermod -a -G mock vagrant
$ fedora-packager-setup
$ kinit surajd@FEDORAPROJECT.ORG
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;my-notes&#34;&gt;My Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Start reading from: &lt;a href=&#34;https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/index.html&#34;&gt;Fedora packager&amp;rsquo;s guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some macros come from &lt;code&gt;redhat-rpm-config&lt;/code&gt; and &lt;code&gt;fedora-rpm-macros&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rpm -ql redhat-rpm-config-45-1.fc25.noarch
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see all macros on the system:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm --showrc
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Koji - fedora build system&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fedora&lt;/code&gt; uses &lt;code&gt;fedpkg&lt;/code&gt; for doing builds, while &lt;code&gt;rpmbuild&lt;/code&gt; is for &lt;code&gt;CentOS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To get general info about the package&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm -qip ./x86_64/namaskar-1-1.fc25.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ less namaskar-1-1.fc25.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see what are the dependencies of the package&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm -qp --requires ./noarch/namaskar-1-1.fc25.noarch.rpm
/bin/bash
rpmlib(CompressedFileNames) &amp;lt;= 3.0.4-1
rpmlib(FileDigests) &amp;lt;= 4.6.0-1
rpmlib(PayloadFilesHavePrefix) &amp;lt;= 4.0-1
rpmlib(PayloadIsXz) &amp;lt;= 5.2-1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To see what packages include your package as dependency&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm -qp --provides ./noarch/namaskar-1-1.fc25.noarch.rpm
namaskar = 1-1.fc25
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;After you think the spec is ready and before you push it to build&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fedpkg --release f25 lint
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Doing local mock build&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fedpkg --release f25 mockbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Doing build in fedora build system, koji&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fedpkg --release f25 scratch-build --target f25 --srpm
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Running fedora-review&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ fedpkg --release f25 srpm
$ fedora-review -n namaskar
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Decompress a package, &lt;a href=&#34;https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/sect-Packagers_Guide-Format_of_the_Archived_Files.html&#34;&gt;src&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm2cpio kompose-0.1.0-0.1.git8227684.el7.src.rpm | cpio -ivdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpmdev-extract kompose-0.4.0-0.1.git4e3300c.fc27.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Various ways to query package: &lt;a href=&#34;https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/sect-Packagers_Guide-Querying_Packages.html&#34;&gt;src&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To download source as mentioned in the &lt;code&gt;Source0&lt;/code&gt; tag, use:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ spectool -g kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To validate the rpmspec if it is error free&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpmlint kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Yum and RPM Tricks &lt;a href=&#34;https://wiki.centos.org/TipsAndTricks/YumAndRPM&#34;&gt;https://wiki.centos.org/TipsAndTricks/YumAndRPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Creating RPM Packages with Fedora &lt;a href=&#34;https://fedoraproject.org/wiki/How_to_create_an_RPM_package&#34;&gt;https://fedoraproject.org/wiki/How_to_create_an_RPM_package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Inside the Spec File, Directives For the &lt;code&gt;%files&lt;/code&gt; list &lt;a href=&#34;http://ftp.rpm.org/max-rpm/s1-rpm-inside-files-list-directives.html&#34;&gt;http://ftp.rpm.org/max-rpm/s1-rpm-inside-files-list-directives.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to get sponsored into the packager group &lt;a href=&#34;https://fedoraproject.org/wiki/How_to_get_sponsored_into_the_packager_group&#34;&gt;https://fedoraproject.org/wiki/How_to_get_sponsored_into_the_packager_group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/projectatomic/adb-utils/blob/master/README.adoc#steps-to-build-the-src-rpm&#34;&gt;Doing local builds help from adb-utils repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using Mock to test package builds &lt;a href=&#34;https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds&#34;&gt;https://fedoraproject.org/wiki/Using_Mock_to_test_package_builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Packaging:RPMMacros &lt;a href=&#34;https://fedoraproject.org/wiki/Packaging:RPMMacros?rd=Packaging/RPMMacros&#34;&gt;https://fedoraproject.org/wiki/Packaging:RPMMacros?rd=Packaging/RPMMacros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/carlwgeorge/status/846892384570916866&#34;&gt;Tweet about using &lt;code&gt;rpmdev-extract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Git Notes</title>
      <link>http://suraj.io/post/git-notes/</link>
      <pubDate>Tue, 21 Mar 2017 22:03:48 +0530</pubDate>
      
      <guid>http://suraj.io/post/git-notes/</guid>
      <description>

&lt;p&gt;Notes about using &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tips-and-tricks&#34;&gt;Tips and tricks&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;switch-branches&#34;&gt;Switch branches&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;status&#34;&gt;status&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status -sb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show status in short format and also give branch info&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;show&#34;&gt;show&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shows log message and diff about the commit you are on.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;log&#34;&gt;log&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git log -L 70,100:pkg/transformer/kubernetes/kubernetes.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get logs on file between line numbers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git log --graph --abbrev-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show graph in logs.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;commit&#34;&gt;commit&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git add -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit only parts of file. Interactively choose chunks of patch.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;blame&#34;&gt;blame&lt;/h3&gt;

&lt;p&gt;To see who wrote the code? For each line of the file what commit edited that line of code will be shown. So now you can use that git commit and pass it to &lt;code&gt;git show &amp;lt;commit&amp;gt;&lt;/code&gt; to see all the changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git blame path/to/file
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;cherry-pick&#34;&gt;cherry-pick&lt;/h3&gt;

&lt;p&gt;To move a commit from one branch to another branch. Situation where: &lt;em&gt;I committed to master when I meant to commit to my feature branch. I need to move my commit!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get the commit hash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git show
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change to the branch you wanted to add that commit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout &amp;lt;feature-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add it to the branch you are on&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick &amp;lt;commit hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cherry-pick&lt;/code&gt; creates an entirely new commit based off the original, and it does not delete the original commit. So you will have to delete it manually. See below how to do it.&lt;/p&gt;

&lt;p&gt;You can also get conflict during &lt;code&gt;cherry-pick&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick 435bedfa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolve the conflict and then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git cherry-pick --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;reset&#34;&gt;reset&lt;/h3&gt;

&lt;p&gt;Remove the last commit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;  : &lt;em&gt;the commit I&amp;rsquo;m currently sitting on&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD^&lt;/code&gt; : &lt;em&gt;this commit&amp;rsquo;s parent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HEAD^^&lt;/code&gt;: &lt;em&gt;this commit&amp;rsquo;s grandparent&lt;/em&gt; and so on&lt;/p&gt;

&lt;p&gt;Remove the changes that were accidentally added and not comitted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t want to have the uncommitted changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;rebase&#34;&gt;rebase&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rebase&lt;/code&gt; is a command for changing history.&lt;/li&gt;
&lt;li&gt;Never change history when other people might be using your branch, unless they know you&amp;rsquo;re doing so.&lt;/li&gt;
&lt;li&gt;Never change history on &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Best practice: only change history for commits that have not yet been pushed.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout master
  $ git pull --ff upstream master
  $ git checkout &amp;lt;feature-branch&amp;gt;
  $ git rebase master -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While pushing need to do force push because there is change of history. Local branch and remote branch have diverged.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git push origin &amp;lt;feature-branch&amp;gt; -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case of conflicts, find the conflicting file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;reolve those conflicts and then continue the rebase&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git status
  $ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;use-the-same-commit-message&#34;&gt;Use the same commit message&lt;/h3&gt;

&lt;p&gt;Use the commit message that was generated automatically&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git merge --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git commit --amend --no-edit
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;squashing-commits&#34;&gt;Squashing commits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Amending the commit&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git add missing-file
  $ git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Squashing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at last 5 commits. Below command will open the text editor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --interactive HEAD~5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once in editor, you can select which ones to squash into previous one and ones to pick as it is. Now type new commit message to squashed commits.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;splitting-commits&#34;&gt;Splitting commits&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --i HEAD~3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this will open the commit history in editor. The commit you want to split, change it from &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;edit&lt;/code&gt;. Save that file. Git will pause in the rebase process and give us time to create new commits.
  The too-big commit is already present, so let&amp;rsquo;s pop it off, but keep the changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git reset HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not using &lt;code&gt;--hard&lt;/code&gt; because we want to have the changes we wanted. Make changes as needed. Now add individual file and commit. And continue rebase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;bisect&#34;&gt;bisect&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The feature&amp;rsquo;s broken? But it was working fine 2 months ago&amp;hellip; what changes?&lt;/em&gt; Bisect will help you find the commit that introduced the problem.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need commit where it was working, commit where it&amp;rsquo;s broken and a test to verify that.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git bisect start
  $ git checkout broken-commit
  $ git bisect bad
  $ git checkout working-commit
  $ git bisect good
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;auto-correct-mis-types-in-commands&#34;&gt;Auto-correct mis-types in commands&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git config --global help.autocorrect 10
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;edit-git-output-colors&#34;&gt;Edit git output colors&lt;/h3&gt;

&lt;p&gt;Set various colors to the git logs and all the git output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git config --global color.ui auto
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;git-merge-from-someone-else-s-fork&#34;&gt;Git merge from someone else&amp;rsquo;s fork&lt;/h3&gt;

&lt;p&gt;Add their github fork repo as a remote to a clone of your own repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git remote add other-guys-repo &amp;lt;url to other guys repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get their changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git fetch other-guys-repo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Checkout the branch where you want to merge:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git checkout my_new_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merge their changes in (assuming they did their work on the master branch):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  $ git merge other-guys-repo/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resolve conflicts, commit the resolutions and voila.
  Quick Ref: &lt;a href=&#34;http://stackoverflow.com/a/5606062&#34;&gt;http://stackoverflow.com/a/5606062&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;stash&#34;&gt;stash&lt;/h3&gt;

&lt;p&gt;Save the changes and clean the tree.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;git stash&lt;/code&gt; when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the &lt;code&gt;HEAD&lt;/code&gt; commit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git stash --include-untracked
  git config --global alias.staash &#39;stash --include-untracked&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;--include-untracked&lt;/code&gt; option is used, all untracked files are also stashed and then cleaned up with git clean, leaving the working directory in a very clean state.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git stash --all
  git config --global alias.staaash &#39;stash --all&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;--all&lt;/code&gt; option is used instead then the ignored files are stashed and cleaned in addition to the untracked files.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;how-to-pull-remote-branch-from-somebody-else-s-pr&#34;&gt;How to pull remote branch from somebody else&amp;rsquo;s PR&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git remote add coworker git://path/to/coworkers/repo.git
  git fetch coworker
  git checkout --track coworker/foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will setup a local branch &lt;code&gt;foo&lt;/code&gt;, tracking the remote branch &lt;code&gt;coworker/foo&lt;/code&gt;. So when your coworker has made some changes, you can easily pull them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git checkout foo
  git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick Ref: &lt;a href=&#34;http://stackoverflow.com/a/5884825&#34;&gt;http://stackoverflow.com/a/5884825&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add following code snippet to &lt;code&gt;~/.bashrc&lt;/code&gt;, this will way you have alias to pull any PR.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  function pr() {
      id=$1
      if [ -z $id ]; then
          echo &amp;quot;Need Pull request number as argument&amp;quot;
          return 1
      fi
      git fetch upstream pull/${id}/head:pr_${id}
      git checkout pr_${id}
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usage&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  pr &amp;lt;pr_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;tips-on-writing-git-commits&#34;&gt;Tips on writing git commits&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34;&gt;How to Write a Git Commit Message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://conventionalcommits.org/&#34;&gt;Conventional Commits 1.0.0-beta.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt;Commitizen - Helps in writing commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/magicmonty/bash-git-prompt&#34;&gt;Bash Git Prompt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install using following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  cd &amp;amp;&amp;amp; git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt

  echo &#39;
  #======================================
  # bash git prompt

  source ~/.bash-git-prompt/gitprompt.sh
  GIT_PROMPT_ONLY_IN_REPO=1
  #======================================
  &#39; | tee -a ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;These are tips about using github.com&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;allow edits from maintainers&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help so that maintainers can push on your branch. On the PR at bottom right corner there is a check box to enable that.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Patch from PR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want a patch/diff of changes in a PR just goto PR and at the end of the url put &lt;code&gt;.patch&lt;/code&gt; and you will see formatted patch. e.g. goto &lt;a href=&#34;https://github.com/kubernetes-incubator/kompose/pull/454&#34;&gt;PR&lt;/a&gt; and now the &lt;a href=&#34;https://patch-diff.githubusercontent.com/raw/kubernetes-incubator/kompose/pull/454.patch&#34;&gt;patch&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compare ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/&amp;lt;org&amp;gt;/&amp;lt;project&amp;gt;/compare/&amp;lt;old_version&amp;gt;...&amp;lt;new_version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/kubernetes-incubator/kompose/compare/v0.3.0...v0.4.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Compare things like branches, releases, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compare, patch ranges&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/&amp;lt;org&amp;gt;/&amp;lt;project&amp;gt;/compare/&amp;lt;branch&amp;gt;...&amp;lt;branch&amp;gt;.patch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;goto &lt;code&gt;https://github.com/kubernetes-incubator/kompose/compare/v0.3.0...v0.4.0.patch&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anchors on line numbers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click on the line number and shift click on another line later to select a block of code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References and closing issues/PRs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also you can add closes while merging the PR.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code search&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  repo:kubernetes-incubator/kompose is:pr registry in:title
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;registry&lt;/em&gt; is the string I am searching in the &lt;em&gt;kubernetes-incubator/kompose&lt;/em&gt; repo, which has that string in PR in title.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  repo:openshift/origin is:issue ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When doing things on github you will find queries like these automatically generated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keyboard Shortcuts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; for all the shortcuts.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;t&lt;/code&gt; to search for files, fuzzy search, you need only file name not the full file path.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Others can be found using &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gists as full repos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gists can act as full repos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embedding the gist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add &lt;code&gt;.pibb&lt;/code&gt; at the end of the gist link, you can use it on github pages and other places.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Short link to your github profile pic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;https://github.com/surajssd.png&lt;/code&gt; &lt;strong&gt;OR&lt;/strong&gt; &lt;code&gt;https://github.com/&amp;lt;github_username&amp;gt;.png&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Short url with github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goto &lt;a href=&#34;https://git.io/&#34;&gt;git.io&lt;/a&gt; and shorten any github url.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On any file in github, you can click the blame button and see who made what changes. After clicking on some specific commit, you can see the complete change and from the commit message goto PR for seeing all the discussion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Global list of issues, PRs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the top bar there are buttons for global list of issues and PRs. This can be a good todo list. In issues you can see issues you have created or assigned or mentioned.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing a very huge comment&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;details&amp;gt;
    write whatever here that needs to be hidden
  &amp;lt;/details&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dont-be-afraid-to-commit.readthedocs.io/en/latest/&#34;&gt;Don&amp;rsquo;t be afraid to commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Advanced Git - David Baumgold - &lt;a href=&#34;https://www.youtube.com/watch?v=4EOZvow1mk4&#34;&gt;video&lt;/a&gt;, &lt;a href=&#34;https://speakerdeck.com/singingwolfboy/advanced-git&#34;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/searching-github/&#34;&gt;Searching GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tips &amp;amp; Tricks: Gotta Git Them All - GitHub Universe 2016, &lt;a href=&#34;https://youtu.be/LsxDxL4PYik&#34;&gt;video&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Everything I Wish I Knew When I Started Using GitHub - oscon Portland 2015, &lt;a href=&#34;https://youtu.be/KDUtjZHIx44&#34;&gt;video&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/2125738/3848679&#34;&gt;How to revert a “git rm -r .”?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/39920717/3848679&#34;&gt;How to make “spoiler” text in github wiki pages?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/d-T51nhmFhQ&#34;&gt;20 Tricks with Git and Shell, Spencer Krum - Git Merge 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/3IIaOj1Lhb0&#34;&gt;Git Aliases of the Gods! - Git Merge 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Intellij Shortcuts</title>
      <link>http://suraj.io/post/intellij-shortcuts/</link>
      <pubDate>Fri, 17 Mar 2017 14:41:51 +0530</pubDate>
      
      <guid>http://suraj.io/post/intellij-shortcuts/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a living document and will be updated as I discover new things.&lt;/p&gt;

&lt;h2 id=&#34;shortcuts&#34;&gt;Shortcuts&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + A&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find any action in IDE&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + F&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find in Path&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open project navigator.
You can search here, just start typing here, after the project navigator window is opened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + Insert&lt;/code&gt; in Project window&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here you can add new file to the project. The filename could be the entire path, so the intermediate directories will be created for you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find a struct or class definition by name.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find a file by name.
If you type file name and number seprated by number it will take you to the line in that file. e.g. &lt;code&gt;main.go:6&lt;/code&gt; This will take you to line 6 in &lt;code&gt;main.go&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + Alt + N&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find any symbol in the project. Here symbol means mainly type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + Shift&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Search anything anywhere.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + F4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Close section that is active.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Tab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Switcher to switch between open items&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jump to definition.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + B&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find usage of that element in project. Or find declaration of a variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find type of a variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + cursor up/down&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Navigate the code window up and down&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Duplicate a line or selection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Delete a line or selection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + /&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comment/Uncomment out with line comment, a line or selected block.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + /&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comment/Uncomment out with block comment, a line or selected block.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + Shift + cursor up/down&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Move line or selection up/down.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + -&amp;gt;&lt;/code&gt; or &lt;code&gt;Alt + &amp;lt;-&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Switch tabs of open files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Show recently openend files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + A&lt;/code&gt; &amp;lsquo;Scratch files&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need files that are not part of project but need to test something.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + F12&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hide all the windows and make editor full screen and press again to go back to having all the windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;View + Enter Distraction Free mode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will only keep editor rest everything goes away.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + &amp;lt;-&lt;/code&gt; or &lt;code&gt;Ctrl + Shift + -&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When in the project navigation window you can resize it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + W&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select a word, press again and select a line, then select entire line then entire block, then entire outcasting block and so on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shift + Alt + up/down cursor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a line or block of code is selected and wanna move up and down.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + V&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To see your clipboard history&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + mouse click in location&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To have multiple cursors. To get out of this mode just press &lt;code&gt;escape&lt;/code&gt; key.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + J&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When pressed on a word, it finds the next occurrence of the word and puts a cursor there. So I can edit mutiple occurrences of same word simultaneously.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + I&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Select a block of code and get indentation right.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Alt + L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reformat the code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + Enter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Goto a string and press this key and then you can do language injection. So you can tell intellij to interpret that string as &lt;code&gt;json&lt;/code&gt; or something like that.
So this helps in adding markup languages as string as a part of code. Also you can inject &lt;code&gt;regular expression&lt;/code&gt; and then check if the string is validated
against the regular expressions you put in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + /&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So when a recommendation is opened up and if you press above key combination, the word is completed but if you keep pressing those keys the recommendation
rotates through all the recommendation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + J&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recommend templates, if there are any pre-defined.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Auto complete the current statement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + F12&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Navigate file structure, you can start typing and search for things. And then by pressing the enter key you can jump to the definition.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + 7&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar functionality as above only difference is that it opens in a side bar.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + A&lt;/code&gt; &amp;lsquo;annotate&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start annotation to see who made changes on each line. From here you can copy the revision number and then search it in the &amp;lsquo;version control&amp;rsquo; window.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + F12&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Terminal in IDE&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt + 9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Version Control window&lt;/p&gt;

&lt;h2 id=&#34;notes-and-tips&#34;&gt;Notes and Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In code you can write TODOs and FIXME and then IDE can identify them and you can write code later on in there.&lt;/li&gt;
&lt;li&gt;There is a plugin called as &amp;lsquo;Presentation Assistant&amp;rsquo; which shows what keys did you type&lt;/li&gt;
&lt;li&gt;In the project window(side bar), select &lt;em&gt;Auto Scroll from Source&lt;/em&gt; so when you are moving from one file to another it shows in the project side bar where that file is right now.&lt;/li&gt;
&lt;li&gt;When navigating in the project side bar, to start editing certain file press function key &lt;code&gt;F4&lt;/code&gt;. Press &lt;code&gt;Enter&lt;/code&gt; to just view it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-receipes&#34;&gt;Other receipes&lt;/h2&gt;

&lt;h4 id=&#34;compare-branches&#34;&gt;Compare branches&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl + Shift + A&lt;/code&gt; to open the action window, search for &lt;code&gt;branches&lt;/code&gt;, open branches window. Also can be done &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/2016.1/accessing-git-branches-popup-menu.html&#34;&gt;as&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once branch pop-window is open, select with what branch you wanna compare current checked out branch and select &lt;code&gt;compare&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It will open up a window with all changes, in top tabs select &lt;code&gt;diff&lt;/code&gt;, then select a file you wanna compare.&lt;/li&gt;
&lt;li&gt;Above steps are also given &lt;a href=&#34;https://www.jetbrains.com/help/pycharm/2016.1/merging-deleting-and-comparing-branches.html&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vsyT-7n5-1I&#34;&gt;IntelliJ IDEA Tutorial - Shortcuts to Ditch Your Mouse Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/eq3KiAH4IBI&#34;&gt;42 IntelliJ IDEA Tips and Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Packaging &#39;kompose&#39; for centos paas sig</title>
      <link>http://suraj.io/post/packaging-kompose-for-centos-paas-sig/</link>
      <pubDate>Wed, 15 Mar 2017 14:16:43 +0530</pubDate>
      
      <guid>http://suraj.io/post/packaging-kompose-for-centos-paas-sig/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a living document and will be updated from time to time.&lt;/p&gt;

&lt;p&gt;Following are steps to package kompose for &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup/PaaS&#34;&gt;CentOS PAAS SIG&lt;/a&gt;. CentOS PAAS SIG is a repository of packages where rpms related to OpenShift and eco-system around it are delivered.&lt;/p&gt;

&lt;h2 id=&#34;setup-your-machine&#34;&gt;Setup your machine&lt;/h2&gt;

&lt;p&gt;Install packages needed&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update -y &amp;amp;&amp;amp; \
sudo yum install -y epel-release &amp;amp;&amp;amp; \
sudo yum install -y rpm-build go redhat-rpm-config make \
                    gcc byobu rpmlint rpmdevtools centos-packager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup certs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;centos-cert -u surajd -n
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;make-sure-your-rpmspec-is-error-free&#34;&gt;Make sure your rpmspec is error free&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpmlint kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-kompose-srpm&#34;&gt;Building kompose srpm&lt;/h2&gt;

&lt;p&gt;There are two ways to build &lt;code&gt;srpm&lt;/code&gt; either build it locally or the ones that is built in koji for &lt;code&gt;epel&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;build-rpms-locally&#34;&gt;Build rpms locally&lt;/h3&gt;

&lt;p&gt;Before you begin make sure you have setup the local directory structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ~/rpmbuild/
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
echo &#39;%_topdir %(echo $HOME)/rpmbuild&#39; &amp;gt; ~/.rpmmacros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the rpm spec and get source code using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spectool -g kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move the source to appropriate location&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp kompose-* ~/rpmbuild/SOURCES/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start local build&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpmbuild -ba kompose.spec --define &amp;quot;dist .el7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once above exits with status code 0, you can find the &lt;code&gt;RPM&lt;/code&gt;s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll ~/rpmbuild/RPMS/x86_64/
total 9724
-rw-rw-r--. 1 vagrant vagrant 9956072 May 26 09:37 kompose-0.7.0-0.1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SRPM&lt;/code&gt;s can be found at:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll ~/rpmbuild/SRPMS/
total 4828
-rw-rw-r--. 1 vagrant vagrant 4941880 May 26 09:37 kompose-0.7.0-0.1.el7.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See if dependencies are properly set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm -qpR ~/rpmbuild/RPMS/x86_64/kompose-*
git
libc.so.6()(64bit)
libc.so.6(GLIBC_2.2.5)(64bit)
libpthread.so.0()(64bit)
libpthread.so.0(GLIBC_2.2.5)(64bit)
libpthread.so.0(GLIBC_2.3.2)(64bit)
rpmlib(CompressedFileNames) &amp;lt;= 3.0.4-1
rpmlib(FileDigests) &amp;lt;= 4.6.0-1
rpmlib(PayloadFilesHavePrefix) &amp;lt;= 4.0-1
rpmlib(PayloadIsXz) &amp;lt;= 5.2-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try installing it locally and test it as mentioned in &lt;a href=&#34;http://suraj.io/post/test-kompose/&#34;&gt;http://suraj.io/post/test-kompose/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pull-sprm&#34;&gt;Pull sprm&lt;/h3&gt;

&lt;p&gt;For release 0.3.0, I pulled SRPM from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://kojipkgs.fedoraproject.org//packages/kompose/0.3.0/0.1.git135165b.el7/src/kompose-0.3.0-0.1.git135165b.el7.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-the-rpm-on-cbs-from-src-rpm&#34;&gt;Build the rpm on cbs from src.rpm&lt;/h2&gt;

&lt;p&gt;CBS is a community build system for SpecialInterestGroup members. It allows to build packages with Koji against CentOS5, CentOS6 and CentOS7.&lt;/p&gt;

&lt;h3 id=&#34;trying-a-scratch-build-on-cbs&#34;&gt;Trying a scratch build on CBS&lt;/h3&gt;

&lt;p&gt;Do a scratch build on CBS in &lt;code&gt;paas7-openshift-common-release&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cbs build --scratch paas7-openshift-common-el7 ~/rpmbuild/SRPMS/kompose-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download the rpm built here to test on CentOS machine.&lt;/p&gt;

&lt;h3 id=&#34;making-an-actual-release&#34;&gt;Making an actual release&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cbs build paas7-openshift-common-el7 ~/rpmbuild/SRPMS/kompose-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once build is done successfully goto build page and download the rpm that is built for &lt;code&gt;x86_64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The page where builds were listed: &lt;a href=&#34;https://cbs.centos.org/koji/taskinfo?taskID=181452&#34;&gt;https://cbs.centos.org/koji/taskinfo?taskID=181452&lt;/a&gt;
The page where this particular build happened and where I had download link to rpm: &lt;a href=&#34;https://cbs.centos.org/koji/buildinfo?buildID=17249&#34;&gt;https://cbs.centos.org/koji/buildinfo?buildID=17249&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://cbs.centos.org/kojifiles/packages/kompose/0.7.0/0.1.el7/x86_64/kompose-0.7.0-0.1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try to install this rpm and see if it works on CentOS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y epel-release
yum install -y wget jq make

wget http://cbs.centos.org/kojifiles/packages/kompose/0.7.0/0.1.el7/x86_64/kompose-0.7.0-0.1.el7.x86_64.rpm

yum install -y kompose-0.7.0-0.1.el7.x86_64.rpm

git clone https://github.com/kubernetes-incubator/kompose/
cd kompose
make test-cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is okay, Tag it into testing,
Verify that whatever you built last cbs is the good, the output should be version you wanted, and not the old one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-candidate kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-candidate  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag the build output of above command to testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs tag-pkg paas7-openshift-common-testing kompose-0.7.0-0.1.el7
Created task 181472
Watching tasks (this may be safely interrupted)...
181472 tagBuild (noarch): closed

181472 tagBuild (noarch) completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify it is in testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-testing kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-testing  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run whatever tests you want to verify that it&amp;rsquo;s a good build.
It takes anywhere from 5 to 30 minutes for the rpm to make it into testing
&lt;a href=&#34;http://buildlogs.centos.org/centos/7/paas/x86_64/openshift-origin/&#34;&gt;http://buildlogs.centos.org/centos/7/paas/x86_64/openshift-origin/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install centos-release-openshift-origin
yum -y --enablerepo=centos-openshift-origin-testing install kompose
yum install -y epel-release
yum install -y jq make

git clone https://github.com/kubernetes-incubator/kompose/
cd kompose
make test-cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if the package is in testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-testing kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-testing  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag it into release:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs tag-pkg paas7-openshift-common-release kompose-0.7.0-0.1.el7
Created task 181634
Watching tasks (this may be safely interrupted)...
181634 tagBuild (noarch): free
181634 tagBuild (noarch): free -&amp;gt; closed
  0 free  0 open  1 done  0 failed

181634 tagBuild (noarch) completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is populated, it will show up in the repos, install it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y centos-release-openshift-origin
yum install -y kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the SRPM and then Build from the Specfile &lt;a href=&#34;https://wiki.centos.org/HowTos/RebuildSRPM&#34;&gt;https://wiki.centos.org/HowTos/RebuildSRPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set Up an RPM Build Environment under CentOS &lt;a href=&#34;https://wiki.centos.org/HowTos/SetupRpmBuildEnvironment&#34;&gt;https://wiki.centos.org/HowTos/SetupRpmBuildEnvironment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dustymabe/fedpkg-kompose/blob/a3400c73843986693dbdc831de6de7f3a029f783/notes.txt&#34;&gt;Kompose build instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS PaaS SIG &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup/PaaS&#34;&gt;https://wiki.centos.org/SpecialInterestGroup/PaaS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS SIGs &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup&#34;&gt;https://wiki.centos.org/SpecialInterestGroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CBS &lt;a href=&#34;https://wiki.centos.org/HowTos/CommunityBuildSystem&#34;&gt;https://wiki.centos.org/HowTos/CommunityBuildSystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.centos.org/HowTos/CentosPackager&#34;&gt;Building in CBS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/projectatomic/adb-utils/blob/master/README.adoc#steps-to-build-the-src-rpm&#34;&gt;RPM help from adb-utils repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Testing &#39;fedora&#39; and &#39;CentOS&#39; kompose package</title>
      <link>http://suraj.io/post/test-kompose/</link>
      <pubDate>Tue, 14 Mar 2017 00:31:57 +0530</pubDate>
      
      <guid>http://suraj.io/post/test-kompose/</guid>
      <description>

&lt;p&gt;I generally do &lt;code&gt;kompose&lt;/code&gt; package testing for fedora and CentOS. So here are the steps I follow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: All the commands that start with &lt;code&gt;#&lt;/code&gt; are inside the container.&lt;/p&gt;

&lt;h2 id=&#34;fedora&#34;&gt;Fedora&lt;/h2&gt;

&lt;p&gt;Spin the fedora test environment, let&amp;rsquo;s say fedora 25, I do it in containers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it fedora:25 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once inside the container download the latest package from the testing repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf --enablerepo updates-testing -y install kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure you download the latest release, there might be conditions that you download the old package.&lt;/p&gt;

&lt;p&gt;Now having the package is not enough, we need to run the functional tests, which is in the source repoistory. But before we clone the repo, we need some dependencies like &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;jq&lt;/code&gt;. So install them using packages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf install -y jq make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;centos&#34;&gt;CentOS&lt;/h2&gt;

&lt;p&gt;Spin the CentOS environment in container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run -it centos bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;epel-repo&#34;&gt;&lt;code&gt;epel&lt;/code&gt; repo&lt;/h3&gt;

&lt;p&gt;Install kompose from &lt;code&gt;epel-testing&lt;/code&gt; repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y epel-release
yum --enablerepo=epel-testing -y install kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;paas7-openshift-common-el7-repo&#34;&gt;&lt;code&gt;paas7-openshift-common-el7&lt;/code&gt; repo&lt;/h3&gt;

&lt;p&gt;For pulling package from testing repo in CentOS PAAS sig.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install centos-release-openshift-origin
yum -y --enablerepo=centos-openshift-origin-testing install kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And packages needed to run tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y epel-release
yum install -y jq make
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functional-tests&#34;&gt;Functional tests&lt;/h2&gt;

&lt;p&gt;Now lets get the functional tests:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/kubernetes-incubator/kompose/
cd kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test-cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all tests pass then just give a karma for it on the release page.&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/surajssd/blog_contents/blob/master/content/post/test-kompose.md&#34;&gt;Original article on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>http://suraj.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://suraj.io/about/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://github.com/surajssd.png&#34; alt=&#34;Suraj Deshmukh&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am OpenSource Enthusiast.&lt;/li&gt;
&lt;li&gt;I contribute to various container related technologies like kompose, OpenCompose, cri-o, OpenShift, etc.&lt;/li&gt;
&lt;li&gt;A proud Red Hatter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;contact&#34;&gt;Contact&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;IRC, Slack: &lt;code&gt;surajd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/surajssd/&#34;&gt;surajssd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/surajd_&#34;&gt;@surajd_&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email: &lt;code&gt;surajd.service@gmail.com&lt;/code&gt; &amp;amp; &lt;code&gt;surajd@redhat.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stackoverflow: &lt;a href=&#34;https://stackoverflow.com/users/3848679/surajd&#34;&gt;surajd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>