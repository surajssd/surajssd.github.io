<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kompose on Suraj Deshmukh</title>
    <link>http://suraj.io/categories/kompose/index.xml</link>
    <description>Recent content in Kompose on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://suraj.io/categories/kompose/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Enabling local development with Kubernetes</title>
      <link>http://suraj.io/post/enabling-local-development-with-k8s/</link>
      <pubDate>Sun, 23 Apr 2017 15:57:07 +0530</pubDate>
      
      <guid>http://suraj.io/post/enabling-local-development-with-k8s/</guid>
      <description>

&lt;p&gt;I want to show how you can enable &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; in your day to day development workflow. So that
you get the feel of production deployment locally from day 1.&lt;/p&gt;

&lt;p&gt;I have a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;flask application&lt;/a&gt; which I am working on. The basic directory structure looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll
total 24
-rw-rw-r--. 1 foo foo  427 Apr 23 16:23 app.py
-rw-rw-r--. 1 foo foo  201 Apr 23 16:55 docker-compose.yml
-rw-rw-r--. 1 foo foo  363 Apr 23 16:21 Dockerfile
-rwxrwxr-x. 1 foo foo   82 Dec  5 19:41 entrypoint.sh
-rw-rw-r--. 1 foo foo 3010 Dec  5 19:41 README.adoc
-rw-rw-r--. 1 foo foo   11 Dec  5 19:41 requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all of these files in this &lt;a href=&#34;https://github.com/surajssd/hitcounter&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For having a local cluster I am using &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt;. So follow instructions to
&lt;a href=&#34;https://kubernetes.io/docs/getting-started-guides/minikube/&#34;&gt;setup minikube&lt;/a&gt;. Once you follow the instructions
you will have a vm running a single node kubernetes cluster and a locally available &lt;code&gt;kubectl&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;Before running this application on the minikube cluster we need configurations that kubernetes understands. Since we
already have docker-compose file we will generate configs from this file with the help from tool called &lt;a href=&#34;http://kompose.io/&#34;&gt;kompose&lt;/a&gt;.
Install kompose as per instructions as given on &lt;a href=&#34;https://github.com/kubernetes-incubator/kompose#installation&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generating configs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir configs
$ kompose convert -o configs/
WARN Kubernetes provider doesnt support build key - ignoring
INFO file &amp;quot;configs/hitcounter-service.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-service.yaml&amp;quot; created
INFO file &amp;quot;configs/hitcounter-deployment.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-deployment.yaml&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we deploy the app we need to make some changes in the deployment files, that were converted from docker-compose service
having &lt;code&gt;build&lt;/code&gt; construct in them. In our case only python app &lt;code&gt;hitcounter&lt;/code&gt; is built is being built from &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will edit file &lt;code&gt;hitcounter-deployment.yaml&lt;/code&gt; in &lt;code&gt;configs&lt;/code&gt; directory, to not pull image but read image from the local docker
storage. Add a field after &lt;code&gt;image&lt;/code&gt; called &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. Make changes as shown in following diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ git diff
diff --git a/configs/hitcounter-deployment.yaml b/configs/hitcounter-deployment.yaml
index 7b1116d..0ef35b3 100644
--- a/configs/hitcounter-deployment.yaml
+++ b/configs/hitcounter-deployment.yaml
@@ -17,6 +17,7 @@ spec:
         - name: REDIS_HOST
           value: redis
         image: hitcounter
+        imagePullPolicy: IfNotPresent
         name: hitcounter
         ports:
         - containerPort: 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready with the configs, but we need to build container image for our app. So here you will need to have
&lt;code&gt;docker-compose&lt;/code&gt; installed on your machine. For that follow &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docs here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Build image in the minikube&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval $(minikube docker-env)
docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the build is complete, we are good to the deployment in kubernetes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create -f configs/
deployment &amp;quot;hitcounter&amp;quot; created
service &amp;quot;hitcounter&amp;quot; created
deployment &amp;quot;redis&amp;quot; created
service &amp;quot;redis&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that the app is running, find out the exposed IP Address as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get svc
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
hitcounter   10.0.0.244   &amp;lt;pending&amp;gt;     5000:30476/TCP   6s
kubernetes   10.0.0.1     &amp;lt;none&amp;gt;        443/TCP          3d
redis        10.0.0.21    &amp;lt;none&amp;gt;        6379/TCP         6s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now hit the externally exposed port &lt;code&gt;30476&lt;/code&gt; of service &lt;code&gt;hitcounter&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl $(minikube ip):30476
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everytime you make changes to code do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build
kubectl scale deployment hitcounter --replicas=0
kubectl scale deployment hitcounter --replicas=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above we are removing all containers with old image and asking it to use the new image. For OpenShift we can do
&lt;code&gt;oc deploy hitcounter --latest&lt;/code&gt; and it will trigger the deployment but I could not find anything similar with
kubernetes.&lt;/p&gt;

&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Why do I need to make changes in the kompose generated configs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because by the default the config that kompose generates will not set &lt;code&gt;imagePullPolicy&lt;/code&gt; and hence Kubernetes
assumes its value to be &lt;code&gt;Always&lt;/code&gt;. So if you don&amp;rsquo;t make changes and try to deploy then Kubernetes will try
to find the image from docker hub. Which it won&amp;rsquo;t find and then that deployment will fail.
So we need to tell Kubernetes to look for the image in local docker storage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Can I use the same configs in the production servers as well?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes you can use it just remove the change we did in the &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. The change is done
to enable you to use the locally built images without having to push the image to any container registry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- How do I get images when I am deploying in production level cluster?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure your cluster can pull images from some private container registry. And then set up a build pipeline
from your code repo to build container on every change of it&amp;rsquo;s stable branch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I have &lt;code&gt;build&lt;/code&gt; defined in my &lt;code&gt;docker-compose&lt;/code&gt; service why do I need to mention image name?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With docker-compose this is okay. But kompose cannot make up a name on it&amp;rsquo;s own and create deployment. The
&lt;a href=&#34;https://github.com/kubernetes-incubator/kompose/issues/571&#34;&gt;issue&lt;/a&gt; is tracked in kompose. But for now
with &lt;code&gt;build&lt;/code&gt; also provide the &lt;code&gt;image&lt;/code&gt; name you would expect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I get error running docker commands with minikube?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you face problem accessing the docker daemon running inside the minikube VM like one of this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(minikube docker-env)
$ docker ps
could not read CA certificate &amp;quot;/etc/docker/ca.pem&amp;quot;: open /etc/docker/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be because there is a mismatch in docker client and docker daemon version, so to solve this issue just copy
the docker client from the minikube VM to the local machine.&lt;/p&gt;

&lt;p&gt;Enter in the VM&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the binary to host machine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp $(which docker) foo@192.168.122.1:/home/foo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put the binary in &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any other questions please ask it, I would like to add those here in FAQ section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Packaging &#39;kompose&#39; for centos paas sig</title>
      <link>http://suraj.io/post/packaging-kompose-for-centos-paas-sig/</link>
      <pubDate>Wed, 15 Mar 2017 14:16:43 +0530</pubDate>
      
      <guid>http://suraj.io/post/packaging-kompose-for-centos-paas-sig/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is a living document and will be updated from time to time.&lt;/p&gt;

&lt;p&gt;Following are steps to package kompose for &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup/PaaS&#34;&gt;CentOS PAAS SIG&lt;/a&gt;. CentOS PAAS SIG is a repository of packages where rpms related to OpenShift and eco-system around it are delivered.&lt;/p&gt;

&lt;h2 id=&#34;setup-your-machine&#34;&gt;Setup your machine&lt;/h2&gt;

&lt;p&gt;Install packages needed&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum update -y &amp;amp;&amp;amp; \
sudo yum install -y epel-release &amp;amp;&amp;amp; \
sudo yum install -y rpm-build go redhat-rpm-config make \
                    gcc byobu rpmlint rpmdevtools centos-packager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setup certs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;centos-cert -u surajd -n
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;make-sure-your-rpmspec-is-error-free&#34;&gt;Make sure your rpmspec is error free&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpmlint kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;building-kompose-srpm&#34;&gt;Building kompose srpm&lt;/h2&gt;

&lt;p&gt;There are two ways to build &lt;code&gt;srpm&lt;/code&gt; either build it locally or the ones that is built in koji for &lt;code&gt;epel&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;build-rpms-locally&#34;&gt;Build rpms locally&lt;/h3&gt;

&lt;p&gt;Before you begin make sure you have setup the local directory structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf ~/rpmbuild/
mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
echo &#39;%_topdir %(echo $HOME)/rpmbuild&#39; &amp;gt; ~/.rpmmacros
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Update the rpm spec and get source code using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;spectool -g kompose.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Move the source to appropriate location&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp kompose-* ~/rpmbuild/SOURCES/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start local build&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rpmbuild -ba kompose.spec --define &amp;quot;dist .el7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once above exits with status code 0, you can find the &lt;code&gt;RPM&lt;/code&gt;s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll ~/rpmbuild/RPMS/x86_64/
total 9724
-rw-rw-r--. 1 vagrant vagrant 9956072 May 26 09:37 kompose-0.7.0-0.1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;SRPM&lt;/code&gt;s can be found at:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll ~/rpmbuild/SRPMS/
total 4828
-rw-rw-r--. 1 vagrant vagrant 4941880 May 26 09:37 kompose-0.7.0-0.1.el7.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See if dependencies are properly set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rpm -qpR ~/rpmbuild/RPMS/x86_64/kompose-*
git
libc.so.6()(64bit)
libc.so.6(GLIBC_2.2.5)(64bit)
libpthread.so.0()(64bit)
libpthread.so.0(GLIBC_2.2.5)(64bit)
libpthread.so.0(GLIBC_2.3.2)(64bit)
rpmlib(CompressedFileNames) &amp;lt;= 3.0.4-1
rpmlib(FileDigests) &amp;lt;= 4.6.0-1
rpmlib(PayloadFilesHavePrefix) &amp;lt;= 4.0-1
rpmlib(PayloadIsXz) &amp;lt;= 5.2-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try installing it locally and test it as mentioned in &lt;a href=&#34;http://suraj.io/post/test-kompose/&#34;&gt;http://suraj.io/post/test-kompose/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pull-sprm&#34;&gt;Pull sprm&lt;/h3&gt;

&lt;p&gt;For release 0.3.0, I pulled SRPM from:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://kojipkgs.fedoraproject.org//packages/kompose/0.3.0/0.1.git135165b.el7/src/kompose-0.3.0-0.1.git135165b.el7.src.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-the-rpm-on-cbs-from-src-rpm&#34;&gt;Build the rpm on cbs from src.rpm&lt;/h2&gt;

&lt;p&gt;CBS is a community build system for SpecialInterestGroup members. It allows to build packages with Koji against CentOS5, CentOS6 and CentOS7.&lt;/p&gt;

&lt;h3 id=&#34;trying-a-scratch-build-on-cbs&#34;&gt;Trying a scratch build on CBS&lt;/h3&gt;

&lt;p&gt;Do a scratch build on CBS in &lt;code&gt;paas7-openshift-common-release&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cbs build --scratch paas7-openshift-common-el7 ~/rpmbuild/SRPMS/kompose-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can download the rpm built here to test on CentOS machine.&lt;/p&gt;

&lt;h3 id=&#34;making-an-actual-release&#34;&gt;Making an actual release&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cbs build paas7-openshift-common-el7 ~/rpmbuild/SRPMS/kompose-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once build is done successfully goto build page and download the rpm that is built for &lt;code&gt;x86_64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The page where builds were listed: &lt;a href=&#34;https://cbs.centos.org/koji/taskinfo?taskID=181452&#34;&gt;https://cbs.centos.org/koji/taskinfo?taskID=181452&lt;/a&gt;
The page where this particular build happened and where I had download link to rpm: &lt;a href=&#34;https://cbs.centos.org/koji/buildinfo?buildID=17249&#34;&gt;https://cbs.centos.org/koji/buildinfo?buildID=17249&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://cbs.centos.org/kojifiles/packages/kompose/0.7.0/0.1.el7/x86_64/kompose-0.7.0-0.1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try to install this rpm and see if it works on CentOS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y epel-release
yum install -y wget jq make

wget http://cbs.centos.org/kojifiles/packages/kompose/0.7.0/0.1.el7/x86_64/kompose-0.7.0-0.1.el7.x86_64.rpm

yum install -y kompose-0.7.0-0.1.el7.x86_64.rpm

git clone https://github.com/kubernetes-incubator/kompose/
cd kompose
make test-cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything is okay, Tag it into testing,
Verify that whatever you built last cbs is the good, the output should be version you wanted, and not the old one.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-candidate kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-candidate  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag the build output of above command to testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs tag-pkg paas7-openshift-common-testing kompose-0.7.0-0.1.el7
Created task 181472
Watching tasks (this may be safely interrupted)...
181472 tagBuild (noarch): closed

181472 tagBuild (noarch) completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify it is in testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-testing kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-testing  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run whatever tests you want to verify that it&amp;rsquo;s a good build.
It takes anywhere from 5 to 30 minutes for the rpm to make it into testing
&lt;a href=&#34;http://buildlogs.centos.org/centos/7/paas/x86_64/openshift-origin/&#34;&gt;http://buildlogs.centos.org/centos/7/paas/x86_64/openshift-origin/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum -y install centos-release-openshift-origin
yum -y --enablerepo=centos-openshift-origin-testing install kompose
yum install -y epel-release
yum install -y jq make

git clone https://github.com/kubernetes-incubator/kompose/
cd kompose
make test-cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if the package is in testing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs latest-build paas7-openshift-common-testing kompose
Build                                     Tag                   Built by
----------------------------------------  --------------------  ----------------
kompose-0.7.0-0.1.el7                     paas7-openshift-common-testing  surajd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag it into release:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cbs tag-pkg paas7-openshift-common-release kompose-0.7.0-0.1.el7
Created task 181634
Watching tasks (this may be safely interrupted)...
181634 tagBuild (noarch): free
181634 tagBuild (noarch): free -&amp;gt; closed
  0 free  0 open  1 done  0 failed

181634 tagBuild (noarch) completed successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is populated, it will show up in the repos, install it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install -y centos-release-openshift-origin
yum install -y kompose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the SRPM and then Build from the Specfile &lt;a href=&#34;https://wiki.centos.org/HowTos/RebuildSRPM&#34;&gt;https://wiki.centos.org/HowTos/RebuildSRPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set Up an RPM Build Environment under CentOS &lt;a href=&#34;https://wiki.centos.org/HowTos/SetupRpmBuildEnvironment&#34;&gt;https://wiki.centos.org/HowTos/SetupRpmBuildEnvironment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dustymabe/fedpkg-kompose/blob/a3400c73843986693dbdc831de6de7f3a029f783/notes.txt&#34;&gt;Kompose build instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS PaaS SIG &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup/PaaS&#34;&gt;https://wiki.centos.org/SpecialInterestGroup/PaaS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS SIGs &lt;a href=&#34;https://wiki.centos.org/SpecialInterestGroup&#34;&gt;https://wiki.centos.org/SpecialInterestGroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CBS &lt;a href=&#34;https://wiki.centos.org/HowTos/CommunityBuildSystem&#34;&gt;https://wiki.centos.org/HowTos/CommunityBuildSystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.centos.org/HowTos/CentosPackager&#34;&gt;Building in CBS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/projectatomic/adb-utils/blob/master/README.adoc#steps-to-build-the-src-rpm&#34;&gt;RPM help from adb-utils repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Testing &#39;fedora&#39; and &#39;CentOS&#39; kompose package</title>
      <link>http://suraj.io/post/test-kompose/</link>
      <pubDate>Tue, 14 Mar 2017 00:31:57 +0530</pubDate>
      
      <guid>http://suraj.io/post/test-kompose/</guid>
      <description>

&lt;p&gt;I generally do &lt;code&gt;kompose&lt;/code&gt; package testing for &lt;code&gt;fedora&lt;/code&gt; and &lt;code&gt;CentOS&lt;/code&gt;. So here are the steps I follow.&lt;/p&gt;

&lt;h2 id=&#34;fedora&#34;&gt;Fedora&lt;/h2&gt;

&lt;p&gt;For respective fedora version use the tag respectively for e.g. &lt;code&gt;25&lt;/code&gt; for &lt;code&gt;fedora 25&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Starting the environment:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it registry.fedoraproject.org/fedora:26 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Inside the container
# Pull packages from the testing repository
dnf --enablerepo updates-testing -y install kompose

# Check the kompose version
kompose version

# Install the testing dependencies
dnf install -y jq make

# Pull the git repository to run the functional tests
git clone https://github.com/kubernetes-incubator/kompose/
cd kompose

# Run cmd tests
make test-cmd

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;centos-epel-repo&#34;&gt;CentOS &lt;code&gt;epel&lt;/code&gt; repo&lt;/h2&gt;

&lt;p&gt;Spin the CentOS environment in container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it centos bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install kompose from &#39;epel-testing&#39; repo
yum install -y epel-release
yum --enablerepo=epel-testing -y install kompose

# Install the testing dependencies
yum install -y jq make

# Pull the git repository to run the functional tests
git clone https://github.com/kubernetes-incubator/kompose/
cd kompose

# Run cmd tests
make test-cmd

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;centos-paas7-openshift-common-el7-repo&#34;&gt;CentOS &lt;code&gt;paas7-openshift-common-el7&lt;/code&gt; repo&lt;/h2&gt;

&lt;p&gt;Spin the CentOS environment in container.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it centos bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For pulling package from testing repo in CentOS PAAS sig
yum -y install centos-release-openshift-origin
yum -y --enablerepo=centos-openshift-origin-testing install kompose

# Install the testing dependencies
yum install -y epel-release
yum install -y jq make

# Pull the git repository to run the functional tests
git clone https://github.com/kubernetes-incubator/kompose/
cd kompose

# Run cmd tests
make test-cmd

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all tests pass then just give a karma for it on the release page.&lt;/p&gt;

&lt;h2 id=&#34;ref&#34;&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/surajssd/blog_contents/blob/master/content/post/test-kompose.md&#34;&gt;Original article on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fedora-cloud/docker-brew-fedora/issues/44&#34;&gt;Getting the latest fedora docker images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/fedora/&#34;&gt;Fedora docker hub page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>