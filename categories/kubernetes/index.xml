<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Suraj Deshmukh</title>
    <link>http://suraj.io/categories/kubernetes/index.xml</link>
    <description>Recent content in Kubernetes on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://suraj.io/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using private container registries from minikube</title>
      <link>http://suraj.io/post/private-registry-from-minikube/</link>
      <pubDate>Fri, 06 Oct 2017 19:32:33 +0530</pubDate>
      
      <guid>http://suraj.io/post/private-registry-from-minikube/</guid>
      <description>&lt;p&gt;I am doing Kubernetes native development using minikube. And for doing that I had to
download a Container image that is available in internally hosted private container registry.&lt;/p&gt;

&lt;p&gt;On the configuration side of doing that you will need to create Kubernetes Secret of type
&lt;code&gt;docker-registry&lt;/code&gt;. And now refer that secret you just created in your Pod manifest under
&lt;code&gt;pod.spec.imagePullSecrets&lt;/code&gt;. For more info follow the tutorial in Kubernetes docs on
&lt;strong&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/&#34;&gt;Pull an Image from a Private Registry&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But this did not help me in pulling image from the private registry, I was getting error as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get events -w
LASTSEEN                        FIRSTSEEN                       COUNT     NAME          KIND      SUBOBJECT                                TYPE      REASON                  SOURCE           MESSAGE
...
2017-10-06 18:46:11 +0530 IST   2017-10-06 18:40:17 +0530 IST   30        private-reg   Pod                 Warning   FailedSync   kubelet, minikube   Error syncing pod
2017-10-06 18:46:23 +0530 IST   2017-10-06 18:40:17 +0530 IST   31        private-reg   Pod                 Warning   FailedSync   kubelet, minikube   Error syncing pod
2017-10-06 18:46:23 +0530 IST   2017-10-06 18:40:18 +0530 IST   24        private-reg   Pod       spec.containers{private-reg-container}   Normal    BackOff   kubelet, minikube   Back-off pulling image &amp;quot;my-cool-registry.com/surajd-images/busybox:1.26.2&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here &lt;code&gt;private-reg&lt;/code&gt; is the pod name and &lt;code&gt;my-cool-registry.com/surajd-images/busybox:1.26.2&lt;/code&gt;
is the image name.&lt;/p&gt;

&lt;p&gt;The registry uses an identity certificate that is issued by company&amp;rsquo;s internal root CA.
Your minikube VM needs to trust this root CA in order to work properly with the internal
registry. This is where I realized that I had to download the CA cert.&lt;/p&gt;

&lt;p&gt;So download the cert and dump it inside the VM, running following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ certificatefile=&amp;lt;your-ca-crt-file&amp;gt;
$ registryserver=&amp;lt;your-registry-server&amp;gt;

$ cat $certificatefile | minikube ssh &amp;quot;sudo mkdir -p /etc/docker/certs.d/$registryserver &amp;amp;&amp;amp; sudo tee /etc/docker/certs.d/$registryserver/ca.crt&amp;quot;
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You will have to press &lt;code&gt;Ctrl + C&lt;/code&gt;, it should have done writing!&lt;/p&gt;

&lt;p&gt;Now you are fully ready to pull the image from this private registry. Happy Hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static Pods using Kubelet on Fedora</title>
      <link>http://suraj.io/post/static-pods/</link>
      <pubDate>Sat, 23 Sep 2017 13:10:14 +0530</pubDate>
      
      <guid>http://suraj.io/post/static-pods/</guid>
      <description>

&lt;p&gt;I wanted to try out &lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial&#34;&gt;&lt;em&gt;Standalone Kubelet Tutorial&lt;/em&gt;&lt;/a&gt;
of &lt;a href=&#34;https://twitter.com/kelseyhightower&#34;&gt;&lt;strong&gt;Kelsey Hightower&lt;/strong&gt;&lt;/a&gt; by myself but I could not
follow it as it is, because it was firstly on &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;GCE&lt;/a&gt; and
secondly it uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Container_Linux_by_CoreOS&#34;&gt;CoreOS&lt;/a&gt;,
but since I am very familiar to &lt;a href=&#34;https://en.wikipedia.org/wiki/Fedora_(operating_system)&#34;&gt;Fedora&lt;/a&gt;
I thought of following that tutorial on it. To get a quick setup of a fresh Fedora machine
use &lt;a href=&#34;https://en.wikipedia.org/wiki/Vagrant_(software)&#34;&gt;Vagrant&lt;/a&gt;. I have used Vagrantfile
available &lt;a href=&#34;https://github.com/surajssd/scripts/blob/master/Vagrantfiles/fedora/Vagrantfile&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog is only replacement of section &lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial#install-the-standalone-kubelet&#34;&gt;&lt;strong&gt;Install the Standalone Kubelet&lt;/strong&gt;&lt;/a&gt;
in tutorial.&lt;/p&gt;

&lt;h2 id=&#34;installing-packages&#34;&gt;Installing packages&lt;/h2&gt;

&lt;p&gt;Since the tutorial uses CoreOS VM it already has a &lt;a href=&#34;https://kubernetes.io/docs/admin/kubelet/&#34;&gt;Kubelet&lt;/a&gt;
binary available, on Fedora you can get one using &lt;a href=&#34;https://en.wikipedia.org/wiki/DNF_(software)&#34;&gt;&lt;code&gt;dnf&lt;/code&gt;&lt;/a&gt;.
In tutorial Kelsey has put in his custom systemd service file, we will also make some
changes to the default kubelet&amp;rsquo;s service file packaged in Fedora.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf -y install kubernetes-node
sudo systemctl enable docker --now
sudo systemctl enable kubelet --now
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;docker&lt;/code&gt; is a dependency of &lt;code&gt;kubelet&lt;/code&gt; it is also installed, all we need to do is start
Docker manually alongwith Kubelet.&lt;/p&gt;

&lt;p&gt;Verify if &lt;code&gt;kubelet&lt;/code&gt; and &lt;code&gt;docker&lt;/code&gt; are running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl status docker kubelet
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;editing-kubelet-systemd-service-file&#34;&gt;Editing kubelet systemd service file&lt;/h2&gt;

&lt;p&gt;Apply following changes to &lt;code&gt;/etc/kubernetes/config&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/config b/config
index 8c0a284..cfccbee 100644
--- a/config
+++ b/config
@@ -16,7 +16,7 @@ KUBE_LOGTOSTDERR=&amp;quot;--logtostderr=true&amp;quot;
 KUBE_LOG_LEVEL=&amp;quot;--v=0&amp;quot;
 
 # Should this cluster be allowed to run privileged docker containers
-KUBE_ALLOW_PRIV=&amp;quot;--allow-privileged=false&amp;quot;
+KUBE_ALLOW_PRIV=&amp;quot;--allow-privileged=true&amp;quot;
 
 # How the controller-manager, scheduler, and proxy find the apiserver
 KUBE_MASTER=&amp;quot;--master=http://127.0.0.1:8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default in Fedora the Kubelet service won&amp;rsquo;t be running privileged pods. Setting flag
&lt;code&gt;--allow-privileged&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will allow you to do that. In Kelsey&amp;rsquo;s tutorial you can
find it &lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial/blob/98b0b5b000cc687cc9c85c54ded7b39f4322d4ba/kubelet.service#L8&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apply following changes to &lt;code&gt;/etc/kubernetes/kubelet&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/kubelet b/kubelet
index cfd5686..07c11ab 100644
--- a/kubelet
+++ b/kubelet
@@ -14,4 +14,4 @@ KUBELET_HOSTNAME=&amp;quot;--hostname-override=127.0.0.1&amp;quot;
 KUBELET_API_SERVER=&amp;quot;--api-servers=http://127.0.0.1:8080&amp;quot;
 
 # Add your own!
-KUBELET_ARGS=&amp;quot;--cgroup-driver=systemd&amp;quot;
+KUBELET_ARGS=&amp;quot;--cgroup-driver=systemd --pod-manifest-path=/etc/kubernetes/manifests&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To Kubelet we have added one more flag called &lt;code&gt;--pod-manifest-path&lt;/code&gt; which is explained in
docs as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Path to the directory containing pod manifest files to run, or the path to a single pod
manifest file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Above line can be found in tutorial in &lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial/blob/98b0b5b000cc687cc9c85c54ded7b39f4322d4ba/kubelet.service#L12&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;make-directory-for-pod-manifests&#34;&gt;Make directory for pod manifests&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir /etc/kubernetes/manifests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;restart-kubelet-service&#34;&gt;Restart &lt;code&gt;kubelet&lt;/code&gt; service&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can follow the rest of the tutorial as it is from section &lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial#static-pods&#34;&gt;&lt;strong&gt;Static Pods&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/static-pod/&#34;&gt;Static Pods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kelseyhightower/standalone-kubelet-tutorial&#34;&gt;Standalone Kubelet Tutorial - Kelsey Hightower&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Learning resources</title>
      <link>http://suraj.io/post/k8s-learning-resources/</link>
      <pubDate>Thu, 17 Aug 2017 23:12:18 +0530</pubDate>
      
      <guid>http://suraj.io/post/k8s-learning-resources/</guid>
      <description>&lt;p&gt;Following is the list of all the places you can learn Kubernetes from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://in.udacity.com/course/scalable-microservices-with-kubernetes--ud615&#34;&gt;Scalable Microservices with Kubernetes&lt;/a&gt; -
Video tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edx.org/course/fundamentals-containers-kubernetes-red-red-hat-do081x#!&#34;&gt;Fundamentals of Containers, Kubernetes, and Red Hat OpenShift&lt;/a&gt; -
Video tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetesbyexample.com/&#34;&gt;Kubernetes By Example&lt;/a&gt; - DIY tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/courses/kubernetes&#34;&gt;Learn Kubernetes using Interactive Browser-Based Scenarios&lt;/a&gt; -
DIY tutorial in your own web browser&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.openshift.com/&#34;&gt;Interactive Learning Portal for OpenShift&lt;/a&gt; -
DIY tutorial in your own web browser&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/home/&#34;&gt;Kubernetes docs&lt;/a&gt; - Textual DIY docs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/api-reference/v1.6/&#34;&gt;Kubernetes API reference v1.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.openshift.org/latest/welcome/index.html&#34;&gt;OpenShift docs&lt;/a&gt; - Textual DIY docs&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Enabling local development with Kubernetes</title>
      <link>http://suraj.io/post/enabling-local-development-with-k8s/</link>
      <pubDate>Sun, 23 Apr 2017 15:57:07 +0530</pubDate>
      
      <guid>http://suraj.io/post/enabling-local-development-with-k8s/</guid>
      <description>

&lt;p&gt;I want to show how you can enable &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; in your day to day development workflow. So that
you get the feel of production deployment locally from day 1.&lt;/p&gt;

&lt;p&gt;I have a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;flask application&lt;/a&gt; which I am working on. The basic directory structure looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ll
total 24
-rw-rw-r--. 1 foo foo  427 Apr 23 16:23 app.py
-rw-rw-r--. 1 foo foo  201 Apr 23 16:55 docker-compose.yml
-rw-rw-r--. 1 foo foo  363 Apr 23 16:21 Dockerfile
-rwxrwxr-x. 1 foo foo   82 Dec  5 19:41 entrypoint.sh
-rw-rw-r--. 1 foo foo 3010 Dec  5 19:41 README.adoc
-rw-rw-r--. 1 foo foo   11 Dec  5 19:41 requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all of these files in this &lt;a href=&#34;https://github.com/surajssd/hitcounter&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For having a local cluster I am using &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt;. So follow instructions to
&lt;a href=&#34;https://kubernetes.io/docs/getting-started-guides/minikube/&#34;&gt;setup minikube&lt;/a&gt;. Once you follow the instructions
you will have a vm running a single node kubernetes cluster and a locally available &lt;code&gt;kubectl&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;Before running this application on the minikube cluster we need configurations that kubernetes understands. Since we
already have docker-compose file we will generate configs from this file with the help from tool called &lt;a href=&#34;http://kompose.io/&#34;&gt;kompose&lt;/a&gt;.
Install kompose as per instructions as given on &lt;a href=&#34;https://github.com/kubernetes-incubator/kompose#installation&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Generating configs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir configs
$ kompose convert -o configs/
WARN Kubernetes provider doesnt support build key - ignoring
INFO file &amp;quot;configs/hitcounter-service.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-service.yaml&amp;quot; created
INFO file &amp;quot;configs/hitcounter-deployment.yaml&amp;quot; created
INFO file &amp;quot;configs/redis-deployment.yaml&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we deploy the app we need to make some changes in the deployment files, that were converted from docker-compose service
having &lt;code&gt;build&lt;/code&gt; construct in them. In our case only python app &lt;code&gt;hitcounter&lt;/code&gt; is built is being built from &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will edit file &lt;code&gt;hitcounter-deployment.yaml&lt;/code&gt; in &lt;code&gt;configs&lt;/code&gt; directory, to not pull image but read image from the local docker
storage. Add a field after &lt;code&gt;image&lt;/code&gt; called &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. Make changes as shown in following diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ git diff
diff --git a/configs/hitcounter-deployment.yaml b/configs/hitcounter-deployment.yaml
index 7b1116d..0ef35b3 100644
--- a/configs/hitcounter-deployment.yaml
+++ b/configs/hitcounter-deployment.yaml
@@ -17,6 +17,7 @@ spec:
         - name: REDIS_HOST
           value: redis
         image: hitcounter
+        imagePullPolicy: IfNotPresent
         name: hitcounter
         ports:
         - containerPort: 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready with the configs, but we need to build container image for our app. So here you will need to have
&lt;code&gt;docker-compose&lt;/code&gt; installed on your machine. For that follow &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;docs here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Build image in the minikube&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval $(minikube docker-env)
docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the build is complete, we are good to the deployment in kubernetes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl create -f configs/
deployment &amp;quot;hitcounter&amp;quot; created
service &amp;quot;hitcounter&amp;quot; created
deployment &amp;quot;redis&amp;quot; created
service &amp;quot;redis&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To verify that the app is running, find out the exposed IP Address as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ kubectl get svc
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
hitcounter   10.0.0.244   &amp;lt;pending&amp;gt;     5000:30476/TCP   6s
kubernetes   10.0.0.1     &amp;lt;none&amp;gt;        443/TCP          3d
redis        10.0.0.21    &amp;lt;none&amp;gt;        6379/TCP         6s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now hit the externally exposed port &lt;code&gt;30476&lt;/code&gt; of service &lt;code&gt;hitcounter&lt;/code&gt; as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl $(minikube ip):30476
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everytime you make changes to code do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build
kubectl scale deployment hitcounter --replicas=0
kubectl scale deployment hitcounter --replicas=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above we are removing all containers with old image and asking it to use the new image. For OpenShift we can do
&lt;code&gt;oc deploy hitcounter --latest&lt;/code&gt; and it will trigger the deployment but I could not find anything similar with
kubernetes.&lt;/p&gt;

&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Why do I need to make changes in the kompose generated configs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because by the default the config that kompose generates will not set &lt;code&gt;imagePullPolicy&lt;/code&gt; and hence Kubernetes
assumes its value to be &lt;code&gt;Always&lt;/code&gt;. So if you don&amp;rsquo;t make changes and try to deploy then Kubernetes will try
to find the image from docker hub. Which it won&amp;rsquo;t find and then that deployment will fail.
So we need to tell Kubernetes to look for the image in local docker storage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- Can I use the same configs in the production servers as well?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes you can use it just remove the change we did in the &lt;code&gt;imagePullPolicy: IfNotPresent&lt;/code&gt;. The change is done
to enable you to use the locally built images without having to push the image to any container registry.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- How do I get images when I am deploying in production level cluster?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure your cluster can pull images from some private container registry. And then set up a build pipeline
from your code repo to build container on every change of it&amp;rsquo;s stable branch.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I have &lt;code&gt;build&lt;/code&gt; defined in my &lt;code&gt;docker-compose&lt;/code&gt; service why do I need to mention image name?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With docker-compose this is okay. But kompose cannot make up a name on it&amp;rsquo;s own and create deployment. The
&lt;a href=&#34;https://github.com/kubernetes-incubator/kompose/issues/571&#34;&gt;issue&lt;/a&gt; is tracked in kompose. But for now
with &lt;code&gt;build&lt;/code&gt; also provide the &lt;code&gt;image&lt;/code&gt; name you would expect.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;- I get error running docker commands with minikube?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you face problem accessing the docker daemon running inside the minikube VM like one of this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ eval $(minikube docker-env)
$ docker ps
could not read CA certificate &amp;quot;/etc/docker/ca.pem&amp;quot;: open /etc/docker/ca.pem: no such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This could be because there is a mismatch in docker client and docker daemon version, so to solve this issue just copy
the docker client from the minikube VM to the local machine.&lt;/p&gt;

&lt;p&gt;Enter in the VM&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the binary to host machine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scp $(which docker) foo@192.168.122.1:/home/foo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put the binary in &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any other questions please ask it, I would like to add those here in FAQ section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick PV for local Kubernetes cluster</title>
      <link>http://suraj.io/post/quick-pv-for-local-k8s/</link>
      <pubDate>Tue, 18 Apr 2017 23:56:15 +0530</pubDate>
      
      <guid>http://suraj.io/post/quick-pv-for-local-k8s/</guid>
      <description>

&lt;p&gt;I do lot of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; related work either on &lt;a href=&#34;https://kubernetes.io/docs/getting-started-guides/minikube/&#34;&gt;minikube&lt;/a&gt; or local &lt;a href=&#34;https://github.com/openshift/origin/blob/master/docs/cluster_up_down.md#overview&#34;&gt;OpenShift cluster&lt;/a&gt; setup in a VM. Often I need to create a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; a.k.a. &lt;code&gt;pvc&lt;/code&gt;. But to use &lt;code&gt;pvc&lt;/code&gt; you have to have a &lt;code&gt;PersistentVolume&lt;/code&gt; or &lt;code&gt;pv&lt;/code&gt; defined.&lt;/p&gt;

&lt;h3 id=&#34;enter-into-the-machine-running-k8s&#34;&gt;Enter into the machine running k8s&lt;/h3&gt;

&lt;p&gt;If using minikube you can do&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-local-directory-for-storage&#34;&gt;Create a local directory for storage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir /tmp/pv0001
chmod 777 /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are on a machine that has &lt;code&gt;SELinux&lt;/code&gt; enabled do the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chcon -R -t svirt_sandbox_file_t /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-pv&#34;&gt;Creating &lt;code&gt;pv&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Create file with following content&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat pv.yaml
apiVersion: &amp;quot;v1&amp;quot;
kind: &amp;quot;PersistentVolume&amp;quot;
metadata:
  name: &amp;quot;pv0001&amp;quot;
spec:
  capacity:
    storage: &amp;quot;5Gi&amp;quot;
  accessModes:
    - &amp;quot;ReadWriteOnce&amp;quot;
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /tmp/pv0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get to the terminal from where you can run &lt;code&gt;kubectl&lt;/code&gt; commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl create -f pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are doing it for OpenShift cluster then run following command with privileged access.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;oc create -f pv.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There you have a &lt;code&gt;pv&lt;/code&gt; now you can create &lt;code&gt;pvc&lt;/code&gt;&amp;rsquo;s to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>k8s on CRI-O - single node</title>
      <link>http://suraj.io/post/using-crio-with-k8s-single-node/</link>
      <pubDate>Sat, 08 Apr 2017 00:11:37 +0530</pubDate>
      
      <guid>http://suraj.io/post/using-crio-with-k8s-single-node/</guid>
      <description>

&lt;p&gt;Here is a single node Kubernetes on CRI-O. This setup is done on Fedora 25.&lt;/p&gt;

&lt;h3 id=&#34;installing-os-dependencies&#34;&gt;Installing OS dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnf -y install \
  go \
  git \
  btrfs-progs-devel \
  device-mapper-devel \
  glib2-devel \
  glibc-devel \
  glibc-static \
  gpgme-devel \
  libassuan-devel \
  libgpg-error-devel \
  libseccomp-devel \
  libselinux-devel \
  pkgconfig \
  wget \
  etcd \
  iptables
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;creating-go-environment&#34;&gt;Creating go environment&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~
mkdir -p ~/go

export GOPATH=~/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN

echo &#39;GOPATH=~/go&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;GOBIN=$GOPATH/bin&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;PATH=$PATH:$GOBIN&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pull-all-the-code-dependencies&#34;&gt;Pull all the code dependencies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d k8s.io/kubernetes
go get -u github.com/cloudflare/cfssl/cmd/...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-runc&#34;&gt;Install runc&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d github.com/opencontainers/runc
cd $GOPATH/src/github.com/opencontainers/runc
git reset --hard v1.0.0-rc3
make BUILDTAGS=&#39;seccomp selinux&#39; &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;build-cri-o&#34;&gt;Build &lt;code&gt;cri-o&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd
go get -d github.com/kubernetes-incubator/cri-o
cd $GOPATH/src/github.com/kubernetes-incubator/cri-o
make install.tools
make &amp;amp;&amp;amp; make install
make install.config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-up-cni&#34;&gt;Set up CNI&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -d github.com/containernetworking/cni
cd $GOPATH/src/github.com/containernetworking/cni
./build.sh

mkdir -p /opt/cni/bin
cp bin/* /opt/cni/bin/

mkdir -p /etc/cni/net.d/
cat &amp;gt; /etc/cni/net.d/10-ocid-bridge.conf &amp;lt;&amp;lt;EOF
{
    &amp;quot;cniVersion&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;ocid-bridge&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;bridge&amp;quot;,
    &amp;quot;bridge&amp;quot;: &amp;quot;cni0&amp;quot;,
    &amp;quot;isGateway&amp;quot;: true,
    &amp;quot;ipMasq&amp;quot;: true,
    &amp;quot;ipam&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;host-local&amp;quot;,
        &amp;quot;subnet&amp;quot;: &amp;quot;10.88.0.0/16&amp;quot;,
        &amp;quot;routes&amp;quot;: [
            { &amp;quot;dst&amp;quot;: &amp;quot;0.0.0.0/0&amp;quot; }
        ]
    }
}
EOF

cat &amp;gt; /etc/cni/net.d/99-loopback.conf &amp;lt;&amp;lt;EOF
{
    &amp;quot;cniVersion&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;loopback&amp;quot;
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-policy-json&#34;&gt;Create &lt;code&gt;policy.json&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p  /etc/containers

cat &amp;gt; /etc/containers/policy.json &amp;lt;&amp;lt;EOF
{
    &amp;quot;default&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;insecureAcceptAnything&amp;quot;
        }
    ]
}
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;make-selinux-happy&#34;&gt;Make SELinux happy&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p /var/lib/containers/
chcon -Rt svirt_sandbox_file_t /var/lib/containers/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-ocid-service&#34;&gt;Start ocid service&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:/usr/local/bin/
echo &#39;PATH=$PATH:/usr/local/bin/&#39; &amp;gt;&amp;gt; ~/.bashrc
ocid --runtime /usr/local/sbin/runc --log /root/ocid.log --debug --selinux true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;start-k8s-cluster-with-crio&#34;&gt;Start k8s cluster with crio&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd $GOPATH/src/k8s.io/kubernetes/
CONTAINER_RUNTIME=remote CONTAINER_RUNTIME_ENDPOINT=&#39;/var/run/ocid.sock --runtime-request-timeout=15m&#39; ./hack/local-up-cluster.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use &lt;code&gt;kubectl&lt;/code&gt; (in new terminal)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias kubectl=$GOPATH/src/k8s.io/kubernetes/cluster/kubectl.sh
echo &#39;alias kubectl=$GOPATH/src/k8s.io/kubernetes/cluster/kubectl.sh&#39;  &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ref:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bangalore Kubernetes Meetup - April 2017 - &lt;a href=&#34;https://docs.google.com/presentation/d/1tP7b1e1fy-n3_v5bilDLjOAheZGu602B3WK-1kxXkVo/edit?usp=sharing&#34;&gt;Slides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/runc0m&#34;&gt;runcom&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;https://gist.github.com/runcom/ba58bf2f64e38d9f5d376d587751a0f9#file-fedora_25&#34;&gt;Setup script&lt;/a&gt; for Fedora.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o&#34;&gt;cri-o project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cri-o &lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o/blob/master/tutorial.md&#34;&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-incubator/cri-o/blob/master/kubernetes.md&#34;&gt;Running cri-o on kubernetes cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CRI-O: A kubernetes runtime - &lt;a href=&#34;https://www.youtube.com/watch?v=R-p7BXhtodo&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>