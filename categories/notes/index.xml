<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Suraj Deshmukh</title>
    <link>https://suraj.io/categories/notes/</link>
    <description>Recent content in notes on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 Aug 2020 21:00:51 +0530</lastBuildDate>
    
	<atom:link href="https://suraj.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use Configmap for Scripts</title>
      <link>https://suraj.io/post/use-configmap-for-scripts/</link>
      <pubDate>Sat, 22 Aug 2020 21:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/use-configmap-for-scripts/</guid>
      <description>We generally use some sort of scripts in application container images. They serve various purposes. Some scripts might do an initial setup before the application starts, others may have the whole logic of the container image, etc. Whatever the goal may be the general pattern is to copy the script into the container image, build the image and then the script is available when you consume the image.
Cons of the Traditional Method The round trip time during development and testing of such script is very long.</description>
    </item>
    
    <item>
      <title>Being Productive with Git</title>
      <link>https://suraj.io/post/being-productive-with-git/</link>
      <pubDate>Sun, 16 Aug 2020 22:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/being-productive-with-git/</guid>
      <description>Contents  Introduction Bash Aliases  Configuration Installation   Global Git Configuration  Configuration Installation   Repository Specific Git Settings  Configuration Installation   Bash Git Prompt  Configuration Installation   Git Push PR Reviews  Configuration Installation   Demo Conclusion  Introduction Git is a day to day tool for version control. It has become a de facto method of source code versioning, it has become ubiquitous with development and its an essential skill for a programmer.</description>
    </item>
    
    <item>
      <title>Being Productive with Kubectl</title>
      <link>https://suraj.io/post/being-productive-with-kubectl/</link>
      <pubDate>Sun, 02 Aug 2020 16:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/being-productive-with-kubectl/</guid>
      <description>This blog will showcase my productivity tips with kubectl . This does not venture into any plugins per se. But only using bash aliases to achieve it.
Bash Aliases # k8s alias alias k=kubectl alias kg=&amp;#34;kubectl get&amp;#34; alias kgp=&amp;#34;kubectl get pods&amp;#34; alias kgs=&amp;#34;kubectl get services&amp;#34; alias kge=&amp;#34;kubectl get events&amp;#34; alias kgpvc=&amp;#34;kubectl get pvc&amp;#34; alias kgpv=&amp;#34;kubectl get pv&amp;#34; alias kd=&amp;#34;kubectl describe&amp;#34; alias kl=&amp;#34;kubectl logs -f&amp;#34; alias kc=&amp;#34;kubectl create -f&amp;#34; I have above aliases setup in the ~/.</description>
    </item>
    
    <item>
      <title>How to backup and restore Prometheus?</title>
      <link>https://suraj.io/post/how-to-backup-and-restore-prometheus/</link>
      <pubDate>Fri, 31 Jul 2020 19:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/how-to-backup-and-restore-prometheus/</guid>
      <description>This blog will show you how to take a backup from a running Prometheus and restore it in some other Prometheus instance. You might ask why would you even want to do something like that? Well, sometimes you want the Prometheus metrics because they were collected for some particular purpose and you want to do some analysis later.
Prerequisites/Assumptions This blog assumes that you have a Prometheus running that is deployed using prometheus-operator in monitoring namespace.</description>
    </item>
    
    <item>
      <title>Framework for managing random scripts and binaries</title>
      <link>https://suraj.io/post/framework-for-scripts-and-binaries/</link>
      <pubDate>Sat, 18 Jul 2020 19:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/framework-for-scripts-and-binaries/</guid>
      <description>I always had a conundrum about how to manage the scripts and binaries downloaded randomly from the internet. One way is to put them in the global PATH directory like /usr/local/bin, but I am sceptical about it.
There are a couple of things I wanted to solve. How do you update these scripts and binaries? How to do it consistently across all my machines? How to make it easier to have my setup available on any new Linux machine(or even container) I setup?</description>
    </item>
    
    <item>
      <title>Suraj Deshmukh&#39;s talks at conferences</title>
      <link>https://suraj.io/post/surajd-talks-links/</link>
      <pubDate>Mon, 22 Apr 2019 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/surajd-talks-links/</guid>
      <description> Hardening Kubernetes by Securing Pods - Rootconf 2019    State of Kubernetes Meetups - DevOpsDays India 2017    Making Kubernetes Simple For Developers - Rootconf 2017    Taking docker-compose to Production - Gophercon 2017 Lightening talk Watch from 55m59s
  </description>
    </item>
    
    <item>
      <title>Make static configs available for apiserver in minikube</title>
      <link>https://suraj.io/post/apiserver-in-minikube-static-configs/</link>
      <pubDate>Sun, 20 Jan 2019 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/apiserver-in-minikube-static-configs/</guid>
      <description>If you want to provide extra flags to the kube-apiserver that runs inside minikube how do you do it? You can use the minikube&amp;rsquo;s --extra-config flag with apiserver.&amp;lt;apiserver flag&amp;gt;=&amp;lt;value&amp;gt;, for e.g. if you want to enable RBAC authorization mode you do it as follows:
--extra-config=apiserver.authorization-mode=RBAC So this is a no brainer when doing it for flags whose value can be given right away, like the one above. But what if you want to provide value which is a file path.</description>
    </item>
    
    <item>
      <title>Recreate Kubernetes CVE-2017-1002101</title>
      <link>https://suraj.io/post/cve-2017-1002101-subpath-volume-mount-recreate/</link>
      <pubDate>Mon, 14 Jan 2019 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/cve-2017-1002101-subpath-volume-mount-recreate/</guid>
      <description>A volume mount CVE was discovered in Kubernetes 1.9 and older which allowed access to node file system using emptyDir volume mount using subpath. The official description goes as follows:
 In Kubernetes versions 1.3.x, 1.4.x, 1.5.x, 1.6.x and prior to versions 1.7.14, 1.8.9 and 1.9.4 containers using subpath volume mounts with any volume type (including non-privileged pods, subject to file permissions) can access files/directories outside of the volume, including the host&amp;rsquo;s filesystem.</description>
    </item>
    
    <item>
      <title>Old laptop setup reference</title>
      <link>https://suraj.io/post/old-laptop-setup/</link>
      <pubDate>Sun, 30 Dec 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/old-laptop-setup/</guid>
      <description>I have this old PC Dell Inspiron 1525 with 2GB RAM and 32 bit dual core processor and I wanted to install fedora on it, but I cam accross few problems which I am documenting for further reference.
Wifi device not detected The wifi drivers are not loaded by default, so followed this blog, basically do following:
export FIRMWARE_INSTALL_DIR=&amp;quot;/lib/firmware&amp;quot; wget http://mirror2.openwrt.org/sources/broadcom-wl-5.100.138.tar.bz2 tar xjf broadcom-wl-5.100.138.tar.bz2 cd broadcom-wl-5.100.138/linux/ sudo b43-fwcutter -w /lib/firmware wl_apsta.</description>
    </item>
    
    <item>
      <title>HTTPS during development using &#39;mkcert&#39;</title>
      <link>https://suraj.io/post/mkcert-using-python-http-server/</link>
      <pubDate>Tue, 14 Aug 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/mkcert-using-python-http-server/</guid>
      <description>It&amp;rsquo;s always a hassle creating certificates and lot of technical jargons involved. This can be simplified, using mkcert. Install by following one of the steps mentioned in the docs.
Once installed just run:
$ mkcert -install Created a new local CA at &amp;#34;/home/hummer/.local/share/mkcert&amp;#34; ðŸ’¥ [sudo] password for hummer: The local CA is now installed in the system trust store! âš¡ The local CA is now installed in the Firefox and/or Chrome/Chromium trust store (requires browser restart)!</description>
    </item>
    
    <item>
      <title>vscode Shortcuts</title>
      <link>https://suraj.io/post/vscode-shortcuts/</link>
      <pubDate>Thu, 22 Feb 2018 08:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/vscode-shortcuts/</guid>
      <description>This post has shortcuts that are generic and golang specific as well. This post will edited from time to time.
Shortcuts  Toggle side bar  Ctrl + B
 Project explorer in side bar  Ctrl + Shift + E
 Project wide search in side bar  Ctrl + Shift + F
 Source control in side bar  Ctrl + Shift + G
 Copy entire line  Ctrl + C (without any selection)</description>
    </item>
    
    <item>
      <title>Static Pods using Kubelet on Fedora</title>
      <link>https://suraj.io/post/static-pods/</link>
      <pubDate>Sat, 23 Sep 2017 13:10:14 +0530</pubDate>
      
      <guid>https://suraj.io/post/static-pods/</guid>
      <description>I wanted to try out Standalone Kubelet Tutorial of Kelsey Hightower by myself but I could not follow it as it is, because it was firstly on GCE and secondly it uses CoreOS, but since I am very familiar to Fedora I thought of following that tutorial on it. To get a quick setup of a fresh Fedora machine use Vagrant. I have used Vagrantfile available here.
This blog is only replacement of section Install the Standalone Kubelet in tutorial.</description>
    </item>
    
    <item>
      <title>Clean Node setup</title>
      <link>https://suraj.io/post/node-no-sudo/</link>
      <pubDate>Tue, 04 Jul 2017 22:50:43 +0530</pubDate>
      
      <guid>https://suraj.io/post/node-no-sudo/</guid>
      <description>Make sure you have npm installed.
$ sudo dnf -y install npm Package npm-1:3.10.10-1.6.10.3.1.fc25.x86_64 is already installed, skipping. Dependencies resolved. Nothing to do. Complete! Taken from this post.
mkdir &amp;#34;${HOME}/.npm-packages&amp;#34; echo &amp;#39;prefix=${HOME}/.npm-packages&amp;#39; | tee -a ~/.npmrc echo &amp;#39; #====================================== # npm related stuff NPM_PACKAGES=&amp;#34;${HOME}/.npm-packages&amp;#34; PATH=&amp;#34;$NPM_PACKAGES/bin:$PATH&amp;#34; # Unset manpath so we can inherit from /etc/manpath via the `manpath` command unset MANPATH # delete if you already modified MANPATH elsewhere in your config export MANPATH=&amp;#34;$NPM_PACKAGES/share/man:$(manpath)&amp;#34; #====================================== &amp;#39; | tee -a ~/.</description>
    </item>
    
    <item>
      <title>Quick PV for local Kubernetes cluster</title>
      <link>https://suraj.io/post/quick-pv-for-local-k8s/</link>
      <pubDate>Tue, 18 Apr 2017 23:56:15 +0530</pubDate>
      
      <guid>https://suraj.io/post/quick-pv-for-local-k8s/</guid>
      <description>I do lot of Kubernetes related work either on minikube or local OpenShift cluster setup in a VM. Often I need to create a PersistentVolumeClaim a.k.a. pvc. But to use pvc you have to have a PersistentVolume or pv defined.
Enter into the machine running k8s If using minikube you can do
minikube ssh Create a local directory for storage mkdir /tmp/pv0001 chmod 777 /tmp/pv0001 If you are on a machine that has SELinux enabled do the following</description>
    </item>
    
    <item>
      <title>k8s on CRI-O - single node</title>
      <link>https://suraj.io/post/using-crio-with-k8s-single-node/</link>
      <pubDate>Sat, 08 Apr 2017 00:11:37 +0530</pubDate>
      
      <guid>https://suraj.io/post/using-crio-with-k8s-single-node/</guid>
      <description>Here is a single node Kubernetes on CRI-O. This setup is done on Fedora 25.
Installing OS dependencies dnf -y install \  go \  git \  btrfs-progs-devel \  device-mapper-devel \  glib2-devel \  glibc-devel \  glibc-static \  gpgme-devel \  libassuan-devel \  libgpg-error-devel \  libseccomp-devel \  libselinux-devel \  pkgconfig \  wget \  etcd \  iptables Creating go environment cd ~ mkdir -p ~/go export GOPATH=~/go export GOBIN=$GOPATH/bin export PATH=$PATH:$GOBIN echo &amp;#39;GOPATH=~/go&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>rpm Notes</title>
      <link>https://suraj.io/post/rpm-notes/</link>
      <pubDate>Fri, 24 Mar 2017 10:35:54 +0530</pubDate>
      
      <guid>https://suraj.io/post/rpm-notes/</guid>
      <description>Setup of the system for building rpms $ dnf -y install fedora-packager fedora-review $ sudo usermod -a -G mock vagrant $ fedora-packager-setup $ kinit surajd@FEDORAPROJECT.ORG My Notes  Start reading from: Fedora packager&amp;rsquo;s guide Some macros come from redhat-rpm-config and fedora-rpm-macros.  $ sudo rpm -ql redhat-rpm-config-45-1.fc25.noarch  To see all macros on the system:  $ rpm --showrc  Koji - fedora build system fedora uses fedpkg for doing builds, while rpmbuild is for CentOS To get general info about the package  $ rpm -qip .</description>
    </item>
    
    <item>
      <title>Intellij Shortcuts</title>
      <link>https://suraj.io/post/intellij-shortcuts/</link>
      <pubDate>Fri, 17 Mar 2017 14:41:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/intellij-shortcuts/</guid>
      <description>Note: This is a living document and will be updated as I discover new things.
Shortcuts  Ctrl + Shift + A  Find any action in IDE
 Ctrl + Shift + F  Find in Path
 Alt + 1  Open project navigator. You can search here, just start typing here, after the project navigator window is opened.
 Shift + Insert in Project window  Here you can add new file to the project.</description>
    </item>
    
    <item>
      <title>Packaging &#39;kompose&#39; for centos paas sig</title>
      <link>https://suraj.io/post/packaging-kompose-for-centos-paas-sig/</link>
      <pubDate>Wed, 15 Mar 2017 14:16:43 +0530</pubDate>
      
      <guid>https://suraj.io/post/packaging-kompose-for-centos-paas-sig/</guid>
      <description>Note: This is a living document and will be updated from time to time.
Following are steps to package kompose for CentOS PAAS SIG. CentOS PAAS SIG is a repository of packages where rpms related to OpenShift and eco-system around it are delivered.
Setup your machine Install packages needed
sudo yum update -y &amp;amp;&amp;amp; \ sudo yum install -y epel-release &amp;amp;&amp;amp; \ sudo yum install -y rpm-build go redhat-rpm-config make koji \  gcc byobu rpmlint rpmdevtools centos-packager Setup certs</description>
    </item>
    
    <item>
      <title>Testing &#39;fedora&#39; and &#39;CentOS&#39; kompose package</title>
      <link>https://suraj.io/post/test-kompose/</link>
      <pubDate>Tue, 14 Mar 2017 00:31:57 +0530</pubDate>
      
      <guid>https://suraj.io/post/test-kompose/</guid>
      <description>I generally do kompose package testing for fedora and CentOS. So here are the steps I follow.
Fedora For respective fedora version use the tag respectively for e.g. 25 for fedora 25.
Starting the environment:
docker run -it registry.fedoraproject.org/fedora:26 bash Running tests:
# Inside the container # Pull packages from the testing repository dnf --enablerepo updates-testing -y install kompose # Check the kompose version kompose version # Install the testing dependencies dnf install -y jq make # Pull the git repository to run the functional tests git clone https://github.</description>
    </item>
    
  </channel>
</rss>