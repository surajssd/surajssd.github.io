<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Suraj Deshmukh</title>
    <link>https://suraj.io/categories/notes/</link>
    <description>Recent content in notes on Suraj Deshmukh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Dec 2018 01:00:51 +0530</lastBuildDate>
    
	<atom:link href="https://suraj.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Old laptop setup reference</title>
      <link>https://suraj.io/post/old-laptop-setup/</link>
      <pubDate>Sun, 30 Dec 2018 01:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/old-laptop-setup/</guid>
      <description>I have this old PC Dell Inspiron 1525 with 2GB RAM and 32 bit dual core processor and I wanted to install fedora on it, but I cam accross few problems which I am documenting for further reference.
Wifi device not detected The wifi drivers are not loaded by default, so followed this blog, basically do following:
export FIRMWARE_INSTALL_DIR=&amp;quot;/lib/firmware&amp;quot; wget http://mirror2.openwrt.org/sources/broadcom-wl-5.100.138.tar.bz2 tar xjf broadcom-wl-5.100.138.tar.bz2 cd broadcom-wl-5.100.138/linux/ sudo b43-fwcutter -w /lib/firmware wl_apsta.</description>
    </item>
    
    <item>
      <title>vscode Shortcuts</title>
      <link>https://suraj.io/post/vscode-shortcuts/</link>
      <pubDate>Thu, 22 Feb 2018 08:00:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/vscode-shortcuts/</guid>
      <description>This post has shortcuts that are generic and golang specific as well. This post will edited from time to time.
Shortcuts  Toggle side bar  Ctrl + B
 Project explorer in side bar  Ctrl + Shift + E
 Project wide search in side bar  Ctrl + Shift + F
 Source control in side bar  Ctrl + Shift + G
 Copy entire line  Ctrl + C (without any selection)</description>
    </item>
    
    <item>
      <title>Static Pods using Kubelet on Fedora</title>
      <link>https://suraj.io/post/static-pods/</link>
      <pubDate>Sat, 23 Sep 2017 13:10:14 +0530</pubDate>
      
      <guid>https://suraj.io/post/static-pods/</guid>
      <description>I wanted to try out Standalone Kubelet Tutorial of Kelsey Hightower by myself but I could not follow it as it is, because it was firstly on GCE and secondly it uses CoreOS, but since I am very familiar to Fedora I thought of following that tutorial on it. To get a quick setup of a fresh Fedora machine use Vagrant. I have used Vagrantfile available here.
This blog is only replacement of section Install the Standalone Kubelet in tutorial.</description>
    </item>
    
    <item>
      <title>Clean Node setup</title>
      <link>https://suraj.io/post/node-no-sudo/</link>
      <pubDate>Tue, 04 Jul 2017 22:50:43 +0530</pubDate>
      
      <guid>https://suraj.io/post/node-no-sudo/</guid>
      <description>Make sure you have npm installed.
$ sudo dnf -y install npm Package npm-1:3.10.10-1.6.10.3.1.fc25.x86_64 is already installed, skipping. Dependencies resolved. Nothing to do. Complete!  Taken from this post.
mkdir &amp;quot;${HOME}/.npm-packages&amp;quot; echo &#39;prefix=${HOME}/.npm-packages&#39; | tee -a ~/.npmrc echo &#39; #====================================== # npm related stuff NPM_PACKAGES=&amp;quot;${HOME}/.npm-packages&amp;quot; PATH=&amp;quot;$NPM_PACKAGES/bin:$PATH&amp;quot; # Unset manpath so we can inherit from /etc/manpath via the `manpath` command unset MANPATH # delete if you already modified MANPATH elsewhere in your config export MANPATH=&amp;quot;$NPM_PACKAGES/share/man:$(manpath)&amp;quot; #====================================== &#39; | tee -a ~/.</description>
    </item>
    
    <item>
      <title>Quick PV for local Kubernetes cluster</title>
      <link>https://suraj.io/post/quick-pv-for-local-k8s/</link>
      <pubDate>Tue, 18 Apr 2017 23:56:15 +0530</pubDate>
      
      <guid>https://suraj.io/post/quick-pv-for-local-k8s/</guid>
      <description>I do lot of Kubernetes related work either on minikube or local OpenShift cluster setup in a VM. Often I need to create a PersistentVolumeClaim a.k.a. pvc. But to use pvc you have to have a PersistentVolume or pv defined.
Enter into the machine running k8s If using minikube you can do
minikube ssh  Create a local directory for storage mkdir /tmp/pv0001 chmod 777 /tmp/pv0001  If you are on a machine that has SELinux enabled do the following</description>
    </item>
    
    <item>
      <title>k8s on CRI-O - single node</title>
      <link>https://suraj.io/post/using-crio-with-k8s-single-node/</link>
      <pubDate>Sat, 08 Apr 2017 00:11:37 +0530</pubDate>
      
      <guid>https://suraj.io/post/using-crio-with-k8s-single-node/</guid>
      <description>Here is a single node Kubernetes on CRI-O. This setup is done on Fedora 25.
Installing OS dependencies dnf -y install \ go \ git \ btrfs-progs-devel \ device-mapper-devel \ glib2-devel \ glibc-devel \ glibc-static \ gpgme-devel \ libassuan-devel \ libgpg-error-devel \ libseccomp-devel \ libselinux-devel \ pkgconfig \ wget \ etcd \ iptables  Creating go environment cd ~ mkdir -p ~/go export GOPATH=~/go export GOBIN=$GOPATH/bin export PATH=$PATH:$GOBIN echo &#39;GOPATH=~/go&#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>rpm Notes</title>
      <link>https://suraj.io/post/rpm-notes/</link>
      <pubDate>Fri, 24 Mar 2017 10:35:54 +0530</pubDate>
      
      <guid>https://suraj.io/post/rpm-notes/</guid>
      <description>Setup of the system for building rpms $ dnf -y install fedora-packager fedora-review $ sudo usermod -a -G mock vagrant $ fedora-packager-setup $ kinit surajd@FEDORAPROJECT.ORG  My Notes  Start reading from: Fedora packager&amp;rsquo;s guide Some macros come from redhat-rpm-config and fedora-rpm-macros.  $ sudo rpm -ql redhat-rpm-config-45-1.fc25.noarch   To see all macros on the system:  $ rpm --showrc   Koji - fedora build system fedora uses fedpkg for doing builds, while rpmbuild is for CentOS To get general info about the package  $ rpm -qip .</description>
    </item>
    
    <item>
      <title>Intellij Shortcuts</title>
      <link>https://suraj.io/post/intellij-shortcuts/</link>
      <pubDate>Fri, 17 Mar 2017 14:41:51 +0530</pubDate>
      
      <guid>https://suraj.io/post/intellij-shortcuts/</guid>
      <description>Note: This is a living document and will be updated as I discover new things.
Shortcuts  Ctrl + Shift + A  Find any action in IDE
 Ctrl + Shift + F  Find in Path
 Alt + 1  Open project navigator. You can search here, just start typing here, after the project navigator window is opened.
 Shift + Insert in Project window  Here you can add new file to the project.</description>
    </item>
    
    <item>
      <title>Packaging &#39;kompose&#39; for centos paas sig</title>
      <link>https://suraj.io/post/packaging-kompose-for-centos-paas-sig/</link>
      <pubDate>Wed, 15 Mar 2017 14:16:43 +0530</pubDate>
      
      <guid>https://suraj.io/post/packaging-kompose-for-centos-paas-sig/</guid>
      <description>Note: This is a living document and will be updated from time to time.
Following are steps to package kompose for CentOS PAAS SIG. CentOS PAAS SIG is a repository of packages where rpms related to OpenShift and eco-system around it are delivered.
Setup your machine Install packages needed
sudo yum update -y &amp;amp;&amp;amp; \ sudo yum install -y epel-release &amp;amp;&amp;amp; \ sudo yum install -y rpm-build go redhat-rpm-config make koji \ gcc byobu rpmlint rpmdevtools centos-packager  Setup certs</description>
    </item>
    
    <item>
      <title>Testing &#39;fedora&#39; and &#39;CentOS&#39; kompose package</title>
      <link>https://suraj.io/post/test-kompose/</link>
      <pubDate>Tue, 14 Mar 2017 00:31:57 +0530</pubDate>
      
      <guid>https://suraj.io/post/test-kompose/</guid>
      <description>I generally do kompose package testing for fedora and CentOS. So here are the steps I follow.
Fedora For respective fedora version use the tag respectively for e.g. 25 for fedora 25.
Starting the environment:
docker run -it registry.fedoraproject.org/fedora:26 bash  Running tests:
# Inside the container # Pull packages from the testing repository dnf --enablerepo updates-testing -y install kompose # Check the kompose version kompose version # Install the testing dependencies dnf install -y jq make # Pull the git repository to run the functional tests git clone https://github.</description>
    </item>
    
  </channel>
</rss>