<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Suraj Deshmukh</title>
    <link>https://suraj.io/categories/golang/</link>
    <description>Recent content in Golang on Suraj Deshmukh</description>
    <image>
      <title>Suraj Deshmukh</title>
      <url>https://suraj.io/images/papermod-cover.png</url>
      <link>https://suraj.io/images/papermod-cover.png</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en</language>
    <lastBuildDate>Sun, 30 May 2021 09:40:00 +0530</lastBuildDate>
    <atom:link href="https://suraj.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to import &#39;any&#39; Kubernetes package into your project?</title>
      <link>https://suraj.io/post/2021/05/k8s-import/</link>
      <pubDate>Sun, 30 May 2021 09:40:00 +0530</pubDate>
      <guid>https://suraj.io/post/2021/05/k8s-import/</guid>
      <description>&lt;p&gt;The client libraries that Kubernetes ships are meant to be imported, and you definitely don&amp;rsquo;t need this post explaining how to import them in your Golang based project. A simple &lt;code&gt;go get ...&lt;/code&gt; should do the trick. But, what about the packages that are not meant to be imported? Or the ones that cannot be imported because of &lt;em&gt;&amp;ldquo;technical reasons&amp;rdquo;&lt;/em&gt; ? Could you simply add them to your import statements in the &lt;code&gt;.go&lt;/code&gt; file, and the &lt;code&gt;go&lt;/code&gt; binary will do the right thing when you build the code? Well, let&amp;rsquo;s find that out!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cobra and Persistentflags gotchas</title>
      <link>https://suraj.io/post/cobra-persistent-flag/</link>
      <pubDate>Fri, 04 Jan 2019 01:00:51 +0530</pubDate>
      <guid>https://suraj.io/post/cobra-persistent-flag/</guid>
      <description>How wrong usage of persistent flags can burn you</description>
    </item>
    <item>
      <title>Golang struct tags gotchas</title>
      <link>https://suraj.io/post/golang-struct-tags-space/</link>
      <pubDate>Sun, 12 Aug 2018 01:00:51 +0530</pubDate>
      <guid>https://suraj.io/post/golang-struct-tags-space/</guid>
      <description>Struct tags can give you problems you didn&amp;#39;t see coming ;-)</description>
    </item>
    <item>
      <title>Notes on talk - Advanced testing in golang by Mitchell Hashimoto</title>
      <link>https://suraj.io/post/advanced-golang-testing-mitchellh-talk-notes/</link>
      <pubDate>Wed, 07 Mar 2018 02:21:49 +0530</pubDate>
      <guid>https://suraj.io/post/advanced-golang-testing-mitchellh-talk-notes/</guid>
      <description>This talk has really great takeaways which are worth considering while writing your tests</description>
    </item>
    <item>
      <title>Methods that satisfy interfaces in golang</title>
      <link>https://suraj.io/post/golang-methods-interfaces/</link>
      <pubDate>Fri, 23 Feb 2018 08:00:51 +0530</pubDate>
      <guid>https://suraj.io/post/golang-methods-interfaces/</guid>
      <description>What receiver type methods satisfy which interface, can be understood here.</description>
    </item>
  </channel>
</rss>
